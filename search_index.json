[["index.html", "Robotics Engineering Section 1 Prerequisites", " Robotics Engineering Steve Cline 2021-10-30 Section 1 Prerequisites While we will use Canvas as much as possible in this course, it is not a suitable platform for a course which relies heavily on programming. As a result, you will need to get comfortable using sites like GitHub and other development platforms. Familiarity with these sites will prepare you for future work in college and beyond. BEFORE YOU BEGIN: If you do not already have one, sign up for a GitHub account. ASSIGNMENT 1.1.0: Course Prerequisites One of the development tools that we will utilize in this course is GitHub. This assignment will introduce you to this tool as well as some of the others available this year. Go to the Canvas page for this class and follow the instructions for 1.1.0 - Course Prerequisites. "],["intro.html", "Section 2 Introduction 2.1 A Brief Overview of the Course 2.2 History of Robotics 2.3 The Metric System 2.4 Soldering Basics 2.5 Controlling the Raspberry Pi with Your Chromebook and a USB Cable", " Section 2 Introduction 2.1 A Brief Overview of the Course Remember that engineers spend a majority of their time debugging their designs. You will too. It is not because this course is made too hard for youit is just the way engineering works. They say that no plan survives first contact with implementation. Id have to agree.  Mark Watney, Sol 40 Why begin with this quote? One of my favorite books and movies of all time is The Martian. The struggles of the main character, Mark Whatney, demonstrate the challenges facing engineers. While we will not be risking our lives on another planet, our solutions to the problems in this course, follow the same pattern as his. Where he sought to survive being the only human on another planet by engineering his way out, we will survive this course by learning to attack problems in the same way and remember not to give up. We must keep in mind, no plan will work the first time. During this class students will explore the field of mechatronics using a variety of hands-on activities. Students begin the semester with an introduction to basic history and theory of robotics, the engineering process and tools used to create robotic devices. We will introduce basic electronics concepts. We will examine various types of mechanical mechanisms from simple machines to more complex drive systems. Moving forward, programming becomes an essential and vital element. Students program the onboard micro-processor found on a Raspberry Pi 4B+. This control board will use the Raspian OS which is a version of Linux. While students will work within the Linux shell, the programming language of this course is Python. Students work individually and in teams to design and build simple and complex mechatronic systems capable of meeting a variety of criteria including driving, pushing, controlling speed, etc. Sensors are introduced to allow robotic devices to interact with the environment. Actuator design is discussed and different manipulator systems are introduced. As an essential part of mechanical design, students will be exposed to CAD concepts using OnShape. As you can see from this Euler diagram here, Mechatronics is a complicated field of engineering that combines many areas of study. This is the more technical name for robotics and was created by Tetsuro Mori in 1971 and has served as the name for this field since. In this course, you will be introduced to several of the areas on this diagram. Since you may need to work at home from time to time on projects for this course, be sure that you consider creating a good remote learning environment by doing the following: Create a dedicated workspace for yourself that you can keep neat and organized throughout the year. Pick a place that is as quiet as possible so that you can concentrate. Do not use this space for anything else. In this course that space should include a place for your computer as well as an area to work on electronics projects - preferable with a hard surface like a desktop or workbench. Manage your sleep schedule. You will need to be able to concentrate and stay focused since you do not have a teacher hovering over your workspace to keep you focused. If you go to bed at a consistent time and wake up at a consistent time, you will be able to learn more effectively. Make sure you know how to log on to every account needed for the course. See the Prerequisites for all of the details for this course. Be sure to ask questions if you encounter any difficulties. 2.2 History of Robotics Adapted from Robotics: A Brief History, Stanford University Origins of Robot and Robotics The word robot conjures up a variety of images, from R2D2 and C3PO of Star Wars fame; to human-like machines that exist to serve their creators (perhaps in the form of the cooking and cleaning Rosie in the popular cartoon series the Jetsons); to the Rover Sojourner, which explored the Martian landscape as part of the Mars Pathfinder mission. Some people may alternatively perceive robots as dangerous technological ventures that will someday lead to the demise of the human race, either by outsmarting or outmuscling us and taking over the world, or by turning us into completely technology-dependent beings who passively sit by and program robots to do all of our work. In fact, the first use of the word robot occurred in a play about mechanical men that are built to work on factory assembly lines and that rebel against their human masters. These machines in R.U.R. (Rossums Universal Robots), written by Czech playwright Karl Capek in 1921, got their name from the Czech word for slave. The word robotics was also coined by a writer. Russian-born American science-fiction writer Isaac Asimov first used the word in 1942 in his short story Runabout. Asimov had a much brighter and more optimistic opinion of the robots role in human society than did Capek. He generally characterized the robots in his short stories as helpful servants of man and viewed robots as a better, cleaner race. Asimov also proposed three Laws of Robotics that his robots, as well as sci-fi robotic characters of many other stories, followed: A robot may not injure a human being or, through inaction, allow a human being to come to harm. A robot must obey the orders given it by human beings except where such orders would conflict with the First Law. A robot must protect its own existence as long as such protection does not conflict with the First or Second Law. Added later is the Zeroth Law to precede the others: A robot may not harm humanity, or, by inaction, allow humanity to come to harm. Early Conceptions of Robots One of the first instances of a mechanical device built to regularly carry out a particular physical task occurred around 3000 B.C.: Egyptian water clocks used human figurines to strike the hour bells. In 400 B.C., Archytus of Taremtum, inventor of the pulley and the screw, also invented a wooden pigeon that could fly. Hydraulically-operated statues that could speak, gesture, and prophecy were commonly constructed in Hellenic Egypt during the second century B.C. In the first century A.D., Petronius Arbiter made a doll that could move like a human being. Giovanni Torriani created a wooden robot that could fetch the Emperors daily bread from the store in 1557. Robotic inventions reached a relative peak (before the 20th century) in the 1700s; countless ingenius, yet impractical, automata (i.e. robots) were created during this time period. The 19th century was also filled with new robotic creations, such as a talking doll by Edison and a steam-powered robot by Canadians. Although these inventions throughout history may have planted the first seeds of inspiration for the modern robot, the scientific progress made in the 20th century in the field of robotics surpass previous advancements a thousandfold. The First Programmable System There is very little doubt today about both how essential programming is to robotics and who the earliest computer programmer was. While many would immediately think of modern computer scientists like Steve Wozniak or earlier programmers like Alan Turing, the first person to successfully put forth the idea of a programmable system like a computer was Ada Lovelace. In her article of 1842 (Yes, during the John Tyler administration) she proposed that numbers and objects could be used to express abstract scientific operations and create action based on rules. This was the first time anyone had proposed programming a device to act on inputs based on rules. This is the very heart of what it is to be a robot. Despite the great disadvantage of being born a woman in a very male dominated 19th century, she founded the field which would become the backbone of mechatronics. The Origins of the Math of Robotics The backbone of decision making in the mechatronics is a field of math called Boolean Algebra. As a professor of mathematics at Queens College Cork in Ireland, George Boole published a work titled An Investigation of the Laws of Thought in 1854. Boole sought to prove mathematically the existence of god through the application of logic. While his success at justifying the existence of god has not been supported, the underlying mathematical system that he invented would be used a century later as the foundation for modern day computers. Without Booles contribution to mathematics and logic, modern microprocessers built from transistors would not be possible. While he lived in obscurity during his life, the long legacy of George Boole is found in every computer programming language, including Python. The code below, which you will become familiar with this year, demonstrates this application. While True: print(&quot;Boolean Algebra makes computer decision making possible.&quot;) For a more in-depth understanding of his contributions to mechatronics see the embedded video in the Supplemental Videos Section. The First Modern Robots The earliest robots as we know them were created in the early 1950s by George C. Devol, an inventor from Louisville, Kentucky. He invented and patented a reprogrammable manipulator called Unimate, from Universal Automation. For the next decade, he attempted to sell his product in the industry, but did not succeed. In the late 1960s, businessman/engineer Joseph Engleberger acquired Devols robot patent and was able to modify it into an industrial robot and form a company called Unimation to produce and market the robots. For his efforts and successes, Engleberger is known in the industry as the Father of Robotics. Academia also made much progress in the creation new robots. In 1958 at the Stanford Research Institute, Charles Rosen led a research team in developing a robot called Shakey. Shakey was far more advanced than the original Unimate, which was designed for specialized, industrial applications. Shakey could wheel around the room, observe the scene with his television eyes, move across unfamiliar surroundings, and to a certain degree, respond to his environment. He was given his name because of his wobbly and clattering movements. The Supplemental Videos section of this text has a video made about Shakey. ASSIGNMENT 2.2.0: Git and GitHub Fundamentals Lets expand our knowledge of GitHub now. The goal of this course is to give you a brief introduction to GitHub. Well also provide you with materials for further learning and a few ideas to get you started on our platform. Go to the Canvas page for this class and follow the instructions for 2.2.0 - Git and GitHub Fundamentals. 2.3 The Metric System This section is an adaptation of this page from Southeastern Louisiana University The metric system is the preferred system of scientific units for several reasons: The majority of countries in the world employ the metric system of measurement. The prefixes attached to metric units carry the same meaning for all base units. The metric system is based upon powers of ten, which is convenient because: A measurement in the metric system that is represented by a rational number remains a rational number after metric unit conversion. (For example, 250 mm = 25 cm = .25 m). In contrast irrational unit systems , such as the English system, do not have the same property (For example, 250 inches = 20.8333 ft = 0.0039457 mile) Because metric units are decimal-based, they are easily converted by moving the decimal point. The English System unit of mass is the slug, which when multiplied by the acceleration of gravity (32 ft/sec2) gives the weight in pounds. The metric system uses the following base units: Unit of Measurement Name Abbreviation Length Meter m Mass Gram g Volume Liter L Frequently the above units are too small or more often too large to appropriately scale the measured quantity. It is then necessary to subdivide or expand our measurement unit. This will be discussed in the section on prefixes. SI Units The metric-based Systeme International or SI units are used to standardize the report or calculation of scientific quantities: Physical Quantity Name of Unit Abbreviation Length Meter m Mass Kilogram kg Temperature Kelvin K Time Second s Amount of Substance Mole mol Electric Current Ampere I Luminous Intensity Lumen Iv The SI units are used to construct all other units (these are called derived units). Some examples: Property Symbol Dimensions Name Velocity v m s-1 Area A m2 Frequency v s-1 Hertz (Hz) Force F kg m s-2 Newton (N) Energy E kg m2 s-2 Joule (J) Metric Prefixes To change the scale of the base units, prefixes are attached. A prefix represents a factor by which the base unit must be multiplied. Metric prefixes are listed below (The prefixes most-commonly used in chemistry are listed in red): Prefix Symbol Decimal Value Power of Ten Exa- E 1,000,000,000,000,000,000 1018 Peta- P 1,000,000,000,000,000 1015 Tera- T 1,000,000,000,000 1012 Giga- G 1,000,000,000 109 Mega- M 1,000,000 106 Kilo- k 1,000 103 Hecto- h 100 102 Deka- da 10 101 (no prefix) 1 100 Deci- d 0 .1 10-1 Centi- c 0 .01 10-2 Milli- m 0 .001 10-3 Micro- &amp;#181 0 .000001 10-6 Nano- n 0 .000000001 10-9 Pico- p 0 .000000000001 10-12 Femto- f 0 .000000000000001 10-15 Atto- a 0 .000000000000000001 10-18 ASSIGNMENT 2.3.0: Metric System Practice We will use metric prefixes and units of measure consistently this year to practice these systems complete the short assignment below: Go to the Canvas page for this class and follow the instructions for 2.3.0 - Metric System Practice. 2.4 Soldering Basics Learning how to solder with proper soldering techniques is a fundamental skill everyone who works with electronics should master. In this tutorial, we outline the basics of soldering irons, soldering stations, types of solder, desoldering and safety tips. Whether youre building a robot or working with Arduino, knowing how to solder will come in handy. 2.4.1 How to Solder If you were to take apart any electronic device that contains a circuit board, youll see the components are attached using soldering techniques. Soldering is the process of joining two or more electronic parts together by melting solder around the connection. Solder is a metal alloy and when it cools it creates a strong electrical bond between the parts. Even though soldering can create a permanent connection, it can also be reversed using a desoldering tool as described below. 2.4.2 Soldering Tools The good thing about learning how to solder is the fact that you dont need a lot to get started. Below well outline the basic tools and materials you will need for most of your soldering projects. Soldering Iron A soldering iron is a hand tool that plugs into a standard 120v AC outlet and heats up in order to melt solder around electrical connections. This is one of the most important tools used in soldering and it can come in a few variations such as pen or gun form. For beginners, its recommended that you use the pen style soldering iron in the 15W to 30W range. Most soldering irons have interchangeable tips that can be used for different soldering applications. Be very cautious when using any type of soldering iron because it can heat up to 896 F which is extremely hot. Soldering Station A soldering station is a more advanced version of the basic standalone soldering pen. If you are going to be doing a lot of soldering, these are great to have as they offer more flexibility and control. The main benefit of a soldering station is the ability to precisely adjust the temperature of the soldering iron which is great for a range of projects. These stations can also create a safer workspace as some include advanced temperature sensors, alert settings and even password protection for safety. Soldering Iron Tips At the end of most soldering irons is an interchangeable part known as a soldering tip. There are many variations of this tip and they come in a wide variety of shapes and sizes. Each tip is used for a specific purpose and offers a distinct advantage over another. The most common tips you will use in electronics projects are the conical tip and the chisel tip. Conical Tip  Used in precision electronics soldering because of the fine tip. Because of its pointed end, its able to deliver heat to smaller areas without affecting its surroundings. Chisel Tip  This tip is well-suited to soldering wires or other larger components because of its broad flat tip. Brass or Conventional Sponge Using a sponge will help to keep the soldering iron tip clean by removing the oxidation that forms. Tips with oxidation will tend to turn black and not accept solder as it did when it was new. You could use a conventional wet sponge but this tends to shorten the lifespan of the tip due to expansion and contraction. Also, a wet sponge will drop the temperature of the tip temporarily when wiped. A better alternative is to use a brass sponge as shown on the left. Soldering Iron Stand A soldering iron stand is very basic but very useful and handy to have. This stand helps prevent the hot iron tip from coming in contact with flammable materials or causing accidental injury to your hand. Most soldering stations come with this built in and also include a sponge or brass sponge for cleaning the tip. Solder Solder is a metal alloy material that is melted to create a permanent bond between electrical parts. It comes in both lead and lead-free variations with diameters of .032 and .062 being the most common. Inside the solder core is a material known as flux which helps improve electrical contact and its mechanical strength. For electronics soldering, the most commonly used type is lead-free rosin core solder. This type of solder is usually made up of a Tin/Copper alloy. You can also use leaded 60/40 (60% tin, 40% lead) rosin core solder but its becoming less popular due to health concerns. If you do use lead solder, make sure you have proper ventilation and that you wash your hands after use. When buying solder, make sure NOT to use acid core solder as this will damage your circuits and components. Acid core solder is sold at home improvement stores and is mainly used for plumbing and metal working. As mentioned earlier, solder does come in a few different diameters. The thicker diameter solder (.062) is good for soldering larger joints more quickly but it can make soldering smaller joints difficult. For this reason, its always a good idea to have both sizes on hand for your different projects. Helping Hand (Third Hand) A helping hand is a device that has 2 or more alligator clips and sometimes a magnifying glass/light attached. This clips will assist you by holding the items you are trying to solder while you use the soldering iron and solder. A very helpful tool to have in your makerspace. 2.4.3 Soldering Safety Now that you know what tools and materials are required, its time to briefly discuss ways of staying safe while soldering. Soldering irons can reach temperatures of 800 F so its very important to know where your iron is at all times. We always recommend you use a soldering iron stand to help prevent accidental burns or damage. Make sure you are soldering in a well ventilated area. When solder is heated, there are fumes released that are harmful to your eyes and lungs. Its recommended to use a fume extractor which is a fan with a charcoal filter that absorbs the harmful solder smoke you can visit sites like Integrated Air Systems for air filtration systems. Its always a good idea to wear protective eye wear in case of accidental splashes of hot solder. Lastly, make sure to wash your hands when done soldering especially if using lead solder. 2.4.4 How To Solder There are multiple applications for the skill of soldering. One of the more useful soldering skills is soldering circuit boards. Step 1: Mount The Component  Begin by inserting the leads of the LED into the holes of the circuit board. Flip the board over and bend the leads outward at a 45 angle. This will help the component make a better connection with the copper pad and prevent it from falling out while soldering. Step 2: Heat The Joint  Turn your soldering iron on and if it has an adjustable heat control, set it to 400C. At this point, touch the tip of the iron to the copper pad and the resistor lead at the same time. You need to hold the soldering iron in place for 3-4 seconds in order to heat the pad and the lead. Step 3: Apply Solder To Joint  Continue holding the soldering iron on the copper pad and the lead and touch your solder to the joint. IMPORTANT  Dont touch the solder directly to the tip of the iron. You want the joint to be hot enough to melt the solder when its touched. If the joint is too cold, it will form a bad connection. Step 4: Snip The Leads  Remove the soldering iron and let the solder cool down naturally. Dont blow on the solder as this will cause a bad joint. Once cool, you can snip the extra wire from leads. A proper solder joint is smooth, shiny and looks like a volcano or cone shape. You want just enough solder to cover the entire joint but not too much so it becomes a ball or spills to a nearby lead or joint. 2.4.5 How To Solder Wires Now its time to show you how to solder wires together. For this process, its recommended to use helping hands or other type of clamp device. Step 1 - Begin by removing the insulation from the ends of both wires you are soldering together. If the wire is stranded, twist the strands together with your fingers. Step 2 - Make sure your soldering iron is fully heated and touch the tip to the end of one of the wires. Hold it on the wire for 3-4 seconds. Step 3 - Keep the iron in place and touch the solder to the wire until its fully coated. Repeat this process on the other wire. Step 4 - Hold the two tinned wires on top of each other and touch the soldering iron to both wires. This process should melt the solder and coat both wires evenly. Remove the soldering iron and wait a few seconds to let the soldered connection cool and harden. Use heat shrink to cover the connection. 2.4.6 Desoldering The good thing about using solder is the fact that it can be removed easily in a technique known as desoldering. This comes in handy if you need to remove a component or make a correction to your electronic circuit. To desolder a joint, you will need solder wick which is also known as desoldering braid. Step 1  Place a piece of the desoldering braid on top of the joint/solder you want removed. Step 2  Heat your soldering iron and touch the tip to the top of the braid. This will heat the solder below which will then be absorbed into the desoldering braid. You can now remove the braid to see the solder has been extracted and removed. Be careful touching the braid when you are heating it because it will get hot. Optional  If you have a lot of solder you want removed, you may want to use a device called a solder sucker. This is a handheld mechanical vacuum that sucks up hot solder with a press of a button. To use, press the plunger down at the end of the solder sucker. Heat the joint with your soldering iron and place the tip of the solder sucker over the hot solder. Press the release button to suck up the liquid solder. In order to empty the solder sucker, press down on the plunger. ASSIGNMENT 2.4.0 - Soldering: The Chapstick Flashlight In order to practice our soldering skills, we will build a flashlight using a Chapstick Tube, an LED, a resistor, some wires and a 12V battery. Go to the Canvas page for this class and follow the instructions for 2.4.0 - Soldering: The Chapstick Flashlight. 2.5 Controlling the Raspberry Pi with Your Chromebook and a USB Cable It is not necessary to use a monitor, keyboard and mouse with your Raspberry Pi. While this is an option, it would take up far too much space in the lab to be practical. Instead, we will use a process known as Secure Shell (SSH) Protocol. For the first part of our class, you will connect your Raspberry Pi to your Chromebook through the USB-B to USB-C cable in your kit. This will both provide power for your device and create a network connection to the Pi from the Chrome OS. TAKE NOTE! For this class, we will not use a Graphical User Interface (GUI) with our Pis. Instead we will code directly into the Linux Terminal of the Pi. This takes some practice if one has never used a coding window before. In the end, it is much faster to use a terminal than a GUI and this is the reason why code developers use keyboard shortcuts more often than a mouse. Dont give up if this is not easy at first, with practice you will get better at it! 2.5.1 Add the SSH Application and Connect to the Pi To add the Chrome App for our SSH client, navigate to this extension on the Chrome Web Store. Click Add to Chrome. The extension should appear pinned to the top of your browser with your other extensions. If not, click the extensions icon in the upper right corner of your browser and make sure the pin next to the SSH extension is blue as it is here. If not, click it: To open the app, click on the icon that appears at the top of the browser window in the extension tray. Choose the Connection Dialog command. A box like this will appear: In the username box, type pi and in the hostname box, type 10.55.0.1. In the port box, type 22. Connect (Enter) and select Allow in the pop-up. Type yes into the first pop-up and hit Enter. The initial password for your Pi is \"WHSUpton01. If everything works, the Linux version will be displayed along with the last login date and IP address. The last line displays the terminal prompt for the device. It looks like this: Finally, you need to change your password. Type sudo raspi-config in the terminal. Enter the default password if requested. You will get a screen that looks like this: Choose option 1 and press enter. Arrow down to S3 Password and press enter. Press enter to select OK. Enter your new password and confirm. Press enter to select OK. Arrow down to Finish and press enter. Its always a good idea to reboot after changes like this so type sudo reboot and press enter. You will lose the SSH connection until the pi reboots (~60 seconds). You may reconnect after that time and use your new password. 2.5.2 Test the connection with your first Python Script ASSIGNMENT 2.5.0 - Blink: Test the SSH Throughout the year, we will be writing Python scripts to control external hardware. This first script will use the equipment in the bag with Python Demo written on it. If you closed the SSH connection to the Pi from the earlier section, re-connect it. Go to the Canvas page for this class and follow the instructions for 2.5.0 - Blink: Test the SSH. "],["electrical-concepts.html", "Section 3 Electrical Concepts 3.1 Schematics 3.2 Using a Digital Multimeter 3.3 Circuits 3.4 Voltage and Current 3.5 Resistance 3.6 Ohms Law 3.7 Transistors 3.8 Capacitance 3.9 Logic Gates", " Section 3 Electrical Concepts This class and modern life relies heavily on electricity and electronics. Our course electronics text points this out quite eloquently: The history of electricity starts more than two thousand years ago, with the Greek philosopher Thales being the earliest known researcher into electricity. But it was Alessandro Volta who created the most common DC power source, the battery (for this invention the unit Volt was named after him). Direct current (also known as DC) is the flow of charged particles in one unchanging direction (most commonly found as electron flow through conductive materials). DC can be found in just about every home and electronic device, as it is more practical (compared to AC from power stations) for many consumer devices. Just a few of the places where you can find direct current are batteries, phones, computers, cars, TVs, calculators, and even lightning. We will begin exploring a number of concepts relating to electricity as we will essentially be using electrons as our modes of information processing. From the electrons that flow through a button or distance sensor to be read by the microprocessor to those which supply the power for our motors and servos, we are heavily dependent on electricity. Before we get into this, we need to go over some very important concepts. Take out your Raspberry Pi and follow along with the video below. Rules of this course in regards to electricity: Always work only with DC electricity, never use AC voltage except for when you plug your Raspberry Pi into the outlet. Always work on your circuits when the devices are unplugged and batteries removed. Not only is this a safety issue, it will prevent the need to replace electrical components Only use the components listed in the laboratory activity on which you are working. Do not try new components you have never used before or are unfamiliar with. Keep your work area clean and uncluttered. Do not keep beverages on your workstation. 3.1 Schematics Electronics schematics are our map to designing, building, and troubleshooting circuits. Understanding how to read and follow schematics is an important skill for any electronics engineer. Once some basic components are explained, understanding the relationship between these drawings and real circuits becomes easier. To help us better understand what schematic symbols are, lets start with an overview from our online textboot. Read over Understanding Schematics from All About Circuits. Then, watch the video below that explains these ideas. Using your newly discovered schematic design skills, you will make your own basic schematic. A great online tool for circuit design is Circuit Simulator and Editor. This is a very straightforward app that allows us to build and save schematics on Google Drive or in a simple text file. Spend some time learning the basics of the interface including, adding components, checking for continuity, saving circuits in text files and sharing circuits. ASSIGNMENT 3.1.0 - Schematic Design The electronics schematic is a fundamental piece of robotic design. Since we will be reading and writing schematics quite a bit this year now is a good time to start. After teaching yourself the basics of this app you will build your own schematic of a simple circuit and save it to your assignment repository on GitHub. Go to the Canvas page for this class and follow the instructions for 3.1.0 - Schematic Design. 3.2 Using a Digital Multimeter A digital multimeter is a test tool used to measure two or more electrical valuesprincipally voltage (volts), current (amps) and resistance (ohms). It is a standard diagnostic tool for technicians in the electrical/electronic industries. They long ago replaced needle-based analog meters due to their ability to measure with greater accuracy, reliability and increased impedance. Fluke introduced its first digital multimeter in 1977. Digital multimeters combine the testing capabilities of single-task metersthe voltmeter (for measuring volts), ammeter (amps) and ohmmeter (ohms). Often, they include several additional specialized features or advanced options. Technicians with specific needs, therefore, can seek out a model targeted to meet their needs. The video below demonstrates how to use a multimeter like those we have in the lab. Feel free to get out the multimeter and try out everything you see here EXCEPT A/C VOLTAGE. In order to expand our understanding of this vital electronics tool, we will look a little deeper into the subject using our online textbook. Read the section explaining the multimeter. Complete questions 1-4 on the voltmeter worksheet that goes with the reading and questions 1-4 on the ammeter worksheet that goes with the reading. Complete these questions on your own to help ensure you have a basic understanding of the voltmeter and ammeter functions of a digital multimeter. These questions will be similar to those that you will see on your unit exam. Once you understand what is asked, move on to the assignment. ASSIGNMENT 3.2.0 - The Digital Multimeter as an Electronics Tool Go to the Canvas page for this class and follow the instructions for 3.2.0 - The Digital Multimeter as an Electronics Tool. 3.3 Circuits A basic understanding of circuit electricity is essential going forward. For this section of the course, we will begin using our online textbook. It gives us an excellent overview of electrons, circuits and polarity. Key Concepts of Section 3.1 A circuit is a loop of conductive material. In order for electrons to flow a closed circuit is required. A circuit is open or broken if a complete path for the electrons to flow no longer exists. To help you understand this concept, here is an excellent video from SparkFun Electronics on the topic. Rather than me trying to do a better job than our textbook, you are going to read the short section on circuits. Complete questions 1-5 on the worksheet that goes with the reading on your own to help ensure you have a basic understanding of circuits. These questions will be similar to those that you will see on your unit exam. Once you understand what is asked, move on to the assignment. ASSIGNMENT 3.3.0 - Building Circuits Closed DC circuits will allow us to create robotic systems which will interact with the world. For this assignment, you both create new and debug existing DC circuits. Go to the Canvas page for this class and follow the instructions for 3.3.0 - Building Circuits. 3.4 Voltage and Current The movement of electrons from one pole to another is what we use in robotics to make our robots work. By altering the volume of electrons moving through the wires connected to a motor we can alter the speed of the wheel attached to the motor. The potential energy coming in to our microprocessor pin over a wire attached to a photoresistor tells us the level of brightness or lumosity in a room. Putting these two concepts together we could create a robotic system that opens the blinds on our lab when the sun sets in the west. That is, of course, if we can program our system to make that decision on its own. We will get to the programming part later. For now, we will examine the concepts of voltage and current which allow us, along with resistance, to receive information through sensor and send information out to an actuation device like a motor. To help you understand this concept, here is an excellent video from SparkFun Electronics on the topic. Read short section on voltage and current. Be sure to review the concepts at the bottom of the page for understanding. ASSIGNMENT 3.4.0 - Voltage Versus Current Voltage is the potential power of a DC circuit while current represents the actual power at a given moment. Comparing these two concepts will help us better understand them both. Go to the Canvas page for this class and follow the instructions for 3.4.0 - Voltage Versus Current. 3.5 Resistance The final concept needed to understand how electricity in a DC circuit may be used to control devices is resistance. One day last year I was sitting in my office upstairs. I had just come from the mechatronics lab and had packed a bunch of supplies from the lab into my backpack so I could do a little work on a demonstration I would be giving later in the week. All of a sudden I smelled smoke. I looked down and it was coming from my backpack! After digging around a bit I found the culprit. I had put a battery pack in my bag like the one here: Can you see the problem? I had left all of the batteries in the pack. When I threw it in my bag, the red and black leads touched and starte what is know as a short circuit. With no resistance on the flow of electrons through the wires. The by product of this rapid flow was heat which began to melt the inside of my backpack and start it smoking. Remember this example and always pull one battery out of your battery packs when not connected to your device. Also, never connect two poles of a power source without any resistance. It can cause serious injury. This problem is prevented by placing a resistive force on the circuit. Small electrical components like LEDs and sensors cannot handle even the two amperes of current available from the Raspberry Pis 5V pin. A reisistor is used to prevent the LED from burning up. In order to understand how resistance works, read short section on resistance. ASSIGNMENT 3.5.0 - Modifying Resistance Resistors come in many formats from simple in-line resistors to more complex rheostats and potentiometers. Additionally, they may be wired in series or parallel to increase and decrease total resistance. Go to the Canvas page for this class and follow the instructions for 3.5.0 - Modifying Resistance. 3.6 Ohms Law All three of these concepts come together in Ohms Law. In the 19th century many scientists were experimenting with electricity in an attempt to understand it. One of these scientists, Georg Ohm, determined that there was a relationship between Voltage, Current and Resistance. This is why an LED burns up (receives too much current) when no resistance is placed on the circuit. If we create resistance on the circuit with a resistor the voltage, or potential energy, remains constant but the current decreases. Ohms law is represented by this simple formula: \\[V = I * R\\] On a simple circuit with one 5V power supply and two grounds we can visualize the interaction between the three concepts in this way. The animation here represents such a circuit. Ohms Law tells us that, if we maintain a constant voltage, current is inversly proportional to resistance. In the animation above a 5V power source is connected to two different circuits at once. One circuit has a 100 Ohm resistor while the other has a 1,000 Ohm resistor. The result is that the circuit with a resistor that is ten times larger produces a current that is one tenth of the other. If we have any two of the components of Ohms Law, we can calculate the other. The formula may be adjusted with some simple algebra or by using what is known as the Ohms Law Triangle The video here explains this in more detail. As we will see, this formula is quite handy. It may be rearranged to solve for any one of the three possible outputs (V-voltage, I-current, R-resistance). In order to understand how resistance works, read this short section on Ohms Law. To help you understand this concept, here is an excellent video from SparkFun Electronics on the topic. ASSIGNMENT 3.6.0 - The Fundamentals of Ohms Law Closed DC circuits will allow us to create robotic systems which will interact with the world. For this assignment, you both create new and debug existing DC circuits. Go to the Canvas page for this class and follow the instructions for 3.6.0 - The Fundamentals of Ohms Law. 3.7 Transistors A transistor is a semiconducting devise that may be used as an electrical switch in order to amplify an electronic signal. They are the singal most important component in modern electronics systems. Most transistors have three terminals which may be connected to an external circuit. Voltage applied to one of the terminals acts as a switch when power is applied to it. There are two main types of transistor: bipolar junction transistors (BJTs) and field effect transistors (FETs). BJTs are made of doped materials and can be configured as NPN and PNP. A transistor is an active device with three terminals, and these three terminals are known as the Emitter (E), the Base (B), and the Collector (C). The Base is responsible for controlling the transistor while the Collector is the positive lead, and Emitter is the negative lead. In small, discrete quantities, transistors can be used to create simple electronic switches, digital logic, and signal amplifying circuits. In quantities of thousands, millions, and even billions, transistors are interconnected and embedded into tiny chips to create computer memories, microprocessors, and other complex ICs. Later in this unit we will cover integrated circuits (ICs) in more detail. All transistors have three leads. One lead acts as an electronic switch which allows current to flow between the other two. In this way, a small current (as in the case of current from a microcontroller like a Raspberry Pi or an Arduino) may be used to control a larger current (for example, to turn on a motor). The first transistor type we will look at is the BJT. BJTs exist as PNP and NPN types, based on the doping types of the three main terminal regions. Examination of the figure below shows a small arrow on each schematic symbol for the transistor. This arrow illustrates the direction of current flow. The base (B) lead is the switch which activates the connection between the other two leads. NPN and PNP Transistors This short video illustrates the function and differences between the two types of BJTs. Transistors may also be used to amplify a signal as shown in the diagram below: Transistor Amplifier Circuit In our class we will utilize BJTs but it is worth noting that there are other types that may be useful as well. A very widely used transistor is a metaloxidesemiconductor field-effect transistor (MOSFET) transistor. A key advantage of a MOSFET is that it requires almost no input current to control the load current, when compared with BJTs. MOSFET ASSIGNMENT 3.7.0 - Transistors as Electrical Switches Practice wiring electrical switches with a simple BJT switch. Be sure to use resistors properly in your circuit to avoid overheading your transistor or other components. Go to the Canvas page for this class and follow the instructions for 3.7.0 - Transistors as Electrical Switches. 3.8 Capacitance The capacitor is a component which has the ability or capacity to store energy in the form of an electrical charge producing a potential difference (Static Voltage) across its plates, much like a small rechargeable battery. There are many different kinds of capacitors available from very small capacitor beads used in resonance circuits to large power factor correction capacitors, but they all do the same thing, they store charge. In its basic form, a capacitor consists of two or more parallel conductive (metal) plates which are not connected or touching each other, but are electrically separated either by air or by some form of a good insulating material such as waxed paper, mica, ceramic, plastic or some form of a liquid gel as used in electrolytic capacitors. The insulating layer between a capacitors plates is commonly called the Dielectric. Capacitors Due to this insulating layer, DC current can not flow through the capacitor as it blocks it allowing instead a voltage to be present across the plates in the form of an electrical charge. Capacitor Diagram ASSIGNMENT 3.8.0 - Using Capacitors Capacitance is a fundamental and highly useful electrical concept. Smoothing signals in inverters and other systems help make our robotics systems more reliable. Go to the Canvas page for this class and follow the instructions for 3.8.0 - Using Capacitors. 3.9 Logic Gates Boolean logic is the fundamental mathematics of the integrated circuit (IC). It allows us to build complex computational devices from binary switches. Logic Gates are used in engineering projects to build decision making systems. Robotics systems use that decision making aparatus to control the flow of electricity in order to create the desired behaviors of the system. For example, a NAND gate on an IC, which produces current output in all conditions except when its two input pins are receiving a high voltage, may be used to activate a system when any single condition becomes true but not when both are true. For example, lets say you are a shop owner and have an access gate to your back lot that is used fairly often during the day but very rarely at night. You would like a simple alert tone to sound once first thing in the morning to ensure that the system is activated and then when someone opens the gate at night since that would be an unusual event. During the day when people are frequently open the gate you do not need an alert. In this case if we build this system using the NAND gate we can accomplish this task. This logic gate will only send an output of high to an alarm when either the gate is opened or the light sensor initially senses light (first thing in the morning). If the gate is opened during daylight hours, no alert is created. In this way, we can control the alert system with a simple electronic component like the 7400 IC chip. Hobby circuits like the one shown here may be used to learn how these systems interact with electrical signals in making decisions: Texas Instruments 7400 IC These chips are designed to fit into solderless breadboards and usually placed over the channel in the middle. They also generally fit in many ICs and may be soldered dirctly on them. 3.9.1 Reading the IC Number The most widely manufactured logic family series are the 7400 series ICs. Military grade ICs contain the 54 prefix instead. The derivation of these IC numbers is given below: Manufacturer This code normally consists of two letters and is a code normally used by a given manufacturer. SN is one used by Texas Instruments. Other manufacturers have their own codes that they place here. Temperature Range This is indicated by these two figures. 74 indicates 0°C to 70°C commercial and 54 military: -55°C to +125°C. For most applications the 74 series is perfectly acceptable and this series will be found in consumer devices. Logic Series This is the sub-family. 7400 for example is the basic series, but there are many others. Device This indicates the device function / type. For example devices with 04 are hex inverters, etc. They are the common across all sub-families. Package Code This is the package suffix. It is necessary to refer to the manufacturers datasheets as these codes vary between manufacturers. Almost all of the IC logic gates we use in this course are large footprint (made to fit on a breadboard) 74x00 to 74x99 gates. A comprehensive list of those ICs may be found on this Wikipedia page. 3.9.2 Truth Tables Before getting to the actual electronics we should discuss truth. All logical functions follow the concept of logical truth which creates a model that may be used to understand and build circuits. A truth table is a mathematical table used in logicspecifically in connection with Boolean algebra, boolean functions, and propositional calculuswhich sets out the functional values of logical expressions on each of their functional arguments, that is, for each combination of values taken by their logical variables. In particular, truth tables can be used to show whether a propositional expression is true for all legitimate input values, that is, logically valid. A truth table has one column for each input variable (for example, P and Q), and one final column showing all of the possible results of the logical operation that the table represents (for example, P XOR Q). Each row of the truth table contains one possible configuration of the input variables (for instance, P=true Q=false), and the result of the operation for those values. The truth table for p AND q (also written as p  q) .tg {border-collapse:collapse;border-spacing:0;} .tg td{border-color:black;border-style:solid;border-width:1px;font-family:Arial, sans-serif;font-size:14px; overflow:hidden;padding:10px 5px;word-break:normal;} .tg th{border-color:black;border-style:solid;border-width:1px;font-family:Arial, sans-serif;font-size:14px; font-weight:normal;overflow:hidden;padding:10px 5px;word-break:normal;} .tg .tg-fqep{background-color:#ffcc67;border-color:#ffffff;font-family:\"Courier New\", Courier, monospace !important;;font-size:16px; text-align:center;vertical-align:top} .tg .tg-8bx1{background-color:#ffcc67;border-color:#ffffff;color:#000000;font-family:\"Courier New\", Courier, monospace !important;; font-size:16px;text-align:center;vertical-align:top} .tg .tg-akvw{background-color:#9a0000;border-color:#ffffff;color:#ffffff;font-family:\"Courier New\", Courier, monospace !important;; font-size:16px;text-align:center;vertical-align:top} .tg .tg-sh4o{background-color:#ffcc67;border-color:#ffffff;color:#343434;font-family:\"Courier New\", Courier, monospace !important;; font-size:16px;text-align:center;vertical-align:top} .tg .tg-vsvu{background-color:#c0c0c0;border-color:#ffffff;font-family:\"Courier New\", Courier, monospace !important;;font-size:16px; font-weight:bold;text-align:center;vertical-align:top} p q p  q T T T T F F F T F F F F The truth table for p OR q (also written as p  q) .tg {border-collapse:collapse;border-spacing:0;} .tg td{border-color:black;border-style:solid;border-width:1px;font-family:Arial, sans-serif;font-size:14px; overflow:hidden;padding:10px 5px;word-break:normal;} .tg th{border-color:black;border-style:solid;border-width:1px;font-family:Arial, sans-serif;font-size:14px; font-weight:normal;overflow:hidden;padding:10px 5px;word-break:normal;} .tg .tg-fqep{background-color:#ffcc67;border-color:#ffffff;font-family:\"Courier New\", Courier, monospace !important;;font-size:16px; text-align:center;vertical-align:top} .tg .tg-8bx1{background-color:#ffcc67;border-color:#ffffff;color:#000000;font-family:\"Courier New\", Courier, monospace !important;; font-size:16px;text-align:center;vertical-align:top} .tg .tg-akvw{background-color:#9a0000;border-color:#ffffff;color:#ffffff;font-family:\"Courier New\", Courier, monospace !important;; font-size:16px;text-align:center;vertical-align:top} .tg .tg-sh4o{background-color:#ffcc67;border-color:#ffffff;color:#343434;font-family:\"Courier New\", Courier, monospace !important;; font-size:16px;text-align:center;vertical-align:top} .tg .tg-vsvu{background-color:#c0c0c0;border-color:#ffffff;font-family:\"Courier New\", Courier, monospace !important;;font-size:16px; font-weight:bold;text-align:center;vertical-align:top} p q p  q T T T T F T F T T F F F The truth table for NOT p (also written as ¬p) .tg {border-collapse:collapse;border-spacing:0;} .tg td{border-color:black;border-style:solid;border-width:1px;font-family:Arial, sans-serif;font-size:14px; overflow:hidden;padding:10px 5px;word-break:normal;} .tg th{border-color:black;border-style:solid;border-width:1px;font-family:Arial, sans-serif;font-size:14px; font-weight:normal;overflow:hidden;padding:10px 5px;word-break:normal;} .tg .tg-8bx1{background-color:#ffcc67;border-color:#ffffff;color:#000000;font-family:\"Courier New\", Courier, monospace !important;; font-size:16px;text-align:center;vertical-align:top} .tg .tg-akvw{background-color:#9a0000;border-color:#ffffff;color:#ffffff;font-family:\"Courier New\", Courier, monospace !important;; font-size:16px;text-align:center;vertical-align:top} .tg .tg-vsvu{background-color:#c0c0c0;border-color:#ffffff;font-family:\"Courier New\", Courier, monospace !important;;font-size:16px; font-weight:bold;text-align:center;vertical-align:top} p ¬p T F F T The truth table for p NAND q (also written as p  q) .tg {border-collapse:collapse;border-spacing:0;} .tg td{border-color:black;border-style:solid;border-width:1px;font-family:Arial, sans-serif;font-size:14px; overflow:hidden;padding:10px 5px;word-break:normal;} .tg th{border-color:black;border-style:solid;border-width:1px;font-family:Arial, sans-serif;font-size:14px; font-weight:normal;overflow:hidden;padding:10px 5px;word-break:normal;} .tg .tg-fqep{background-color:#ffcc67;border-color:#ffffff;font-family:\"Courier New\", Courier, monospace !important;;font-size:16px; text-align:center;vertical-align:top} .tg .tg-8bx1{background-color:#ffcc67;border-color:#ffffff;color:#000000;font-family:\"Courier New\", Courier, monospace !important;; font-size:16px;text-align:center;vertical-align:top} .tg .tg-akvw{background-color:#9a0000;border-color:#ffffff;color:#ffffff;font-family:\"Courier New\", Courier, monospace !important;; font-size:16px;text-align:center;vertical-align:top} .tg .tg-sh4o{background-color:#ffcc67;border-color:#ffffff;color:#343434;font-family:\"Courier New\", Courier, monospace !important;; font-size:16px;text-align:center;vertical-align:top} .tg .tg-vsvu{background-color:#c0c0c0;border-color:#ffffff;font-family:\"Courier New\", Courier, monospace !important;;font-size:16px; font-weight:bold;text-align:center;vertical-align:top} p q p  q T T F T F T F T T F F T The truth table for p NOR q (also written as p  q) .tg {border-collapse:collapse;border-spacing:0;} .tg td{border-color:black;border-style:solid;border-width:1px;font-family:Arial, sans-serif;font-size:14px; overflow:hidden;padding:10px 5px;word-break:normal;} .tg th{border-color:black;border-style:solid;border-width:1px;font-family:Arial, sans-serif;font-size:14px; font-weight:normal;overflow:hidden;padding:10px 5px;word-break:normal;} .tg .tg-fqep{background-color:#ffcc67;border-color:#ffffff;font-family:\"Courier New\", Courier, monospace !important;;font-size:16px; text-align:center;vertical-align:top} .tg .tg-8bx1{background-color:#ffcc67;border-color:#ffffff;color:#000000;font-family:\"Courier New\", Courier, monospace !important;; font-size:16px;text-align:center;vertical-align:top} .tg .tg-akvw{background-color:#9a0000;border-color:#ffffff;color:#ffffff;font-family:\"Courier New\", Courier, monospace !important;; font-size:16px;text-align:center;vertical-align:top} .tg .tg-sh4o{background-color:#ffcc67;border-color:#ffffff;color:#343434;font-family:\"Courier New\", Courier, monospace !important;; font-size:16px;text-align:center;vertical-align:top} .tg .tg-vsvu{background-color:#c0c0c0;border-color:#ffffff;font-family:\"Courier New\", Courier, monospace !important;;font-size:16px; font-weight:bold;text-align:center;vertical-align:top} p q p  q T T F T F F F T F F F T The truth table for p XOR q (also written as p  q) .tg {border-collapse:collapse;border-spacing:0;} .tg td{border-color:black;border-style:solid;border-width:1px;font-family:Arial, sans-serif;font-size:14px; overflow:hidden;padding:10px 5px;word-break:normal;} .tg th{border-color:black;border-style:solid;border-width:1px;font-family:Arial, sans-serif;font-size:14px; font-weight:normal;overflow:hidden;padding:10px 5px;word-break:normal;} .tg .tg-fqep{background-color:#ffcc67;border-color:#ffffff;font-family:\"Courier New\", Courier, monospace !important;;font-size:16px; text-align:center;vertical-align:top} .tg .tg-8bx1{background-color:#ffcc67;border-color:#ffffff;color:#000000;font-family:\"Courier New\", Courier, monospace !important;; font-size:16px;text-align:center;vertical-align:top} .tg .tg-akvw{background-color:#9a0000;border-color:#ffffff;color:#ffffff;font-family:\"Courier New\", Courier, monospace !important;; font-size:16px;text-align:center;vertical-align:top} .tg .tg-sh4o{background-color:#ffcc67;border-color:#ffffff;color:#343434;font-family:\"Courier New\", Courier, monospace !important;; font-size:16px;text-align:center;vertical-align:top} .tg .tg-vsvu{background-color:#c0c0c0;border-color:#ffffff;font-family:\"Courier New\", Courier, monospace !important;;font-size:16px; font-weight:bold;text-align:center;vertical-align:top} p q p  q T T F T F T F T T F F F The truth table for p XNOR q (also written as p  q) .tg {border-collapse:collapse;border-spacing:0;} .tg td{border-color:black;border-style:solid;border-width:1px;font-family:Arial, sans-serif;font-size:14px; overflow:hidden;padding:10px 5px;word-break:normal;} .tg th{border-color:black;border-style:solid;border-width:1px;font-family:Arial, sans-serif;font-size:14px; font-weight:normal;overflow:hidden;padding:10px 5px;word-break:normal;} .tg .tg-fqep{background-color:#ffcc67;border-color:#ffffff;font-family:\"Courier New\", Courier, monospace !important;;font-size:16px; text-align:center;vertical-align:top} .tg .tg-8bx1{background-color:#ffcc67;border-color:#ffffff;color:#000000;font-family:\"Courier New\", Courier, monospace !important;; font-size:16px;text-align:center;vertical-align:top} .tg .tg-akvw{background-color:#9a0000;border-color:#ffffff;color:#ffffff;font-family:\"Courier New\", Courier, monospace !important;; font-size:16px;text-align:center;vertical-align:top} .tg .tg-sh4o{background-color:#ffcc67;border-color:#ffffff;color:#343434;font-family:\"Courier New\", Courier, monospace !important;; font-size:16px;text-align:center;vertical-align:top} .tg .tg-vsvu{background-color:#c0c0c0;border-color:#ffffff;font-family:\"Courier New\", Courier, monospace !important;;font-size:16px; font-weight:bold;text-align:center;vertical-align:top} p q p  q T T T T F F F T F F F T With these basic logical functions we can create electronic logical switches. All logic gates are built off the rules expressed in the tables above. 3.9.3 Inverters and Buffers Both of these gates have only a single input pin and single output pin. Inverters apply logical NOT and are represented with the following schematic symbol: Logical NOT Logical NOT is most widely used to invert either the input or output signal of another gate. The 74x06 and 74x14 ICs each provide six input and output gates that invert the signal. All logic gates placed on silicone ICs have external power and ground. This allows them to be utilized as buffers which may boost the single input signal. In this way the buffer gate shown below is only used in order to increase the electrical charge used as in input in other logic gates. While it might seem illogical to do this a buffer is essentially two inverters in a row. In a schematic diagram they are drawn as two NOT gates in a row or the specific buffer symbol. The 74x07 chip contains six hex buffer gates. Buffer 3.9.4 Basic Logic Gates The simplest two input logic gates are AND and OR. They each have two input pins and one output. AND and OR gates are shown here. The 74x08 and 74x32 chips each have four sets of their respective logic gates (AND and OR). AND Gate OR Gate Two other useful logic gates are XOR (exclusive OR) and XNOR (exclusive NOR). It is not yet immediately apparent for the need for the exclusive NOR but, like the exclusive OR, it modifies the gate by interpreting OR a little differently. In the exclusive case two input arguments that are true, do not equal an OR or NOR truth. (See the truth tables above.) The 74x86 IC Chip is a commonly used XOR gate which contains four gates with two inputs and one output each. XOR Gate The 74x266 IC chip is one of the chips which uses four XNOR gates with four output pins. XNOR Gate 3.9.5 Universal Logic Gates The final two cases of logic gates are special. They are the only two gates which may actually be used to build all of the others. In that way, the chips that include these two gates (74x00 and 74x02 among others) function in prototyping projects as a basis for any other system given we have enough room to build the circuit. The 74x00 IC chip is the most commonly used IC because it contains four sets of NAND gates. NAND Gate The 74x02 IC chip contains four sets of NOR gates. NOR Gate This section of the Wikipedia article on logic gates illustrates how to do this. ASSIGNMENT 3.9.0 - Logical Decisions with Integrated Circuits The foundation of computer science is built on the integrated circuit. These fundamental computer components require practice to understand. Be sure to carefully read the datasheets for the ICs before using them. Go to the Canvas page for this class and follow the instructions for 3.9.0 - Logical Decisions with Integrated Circuits. "],["mechanical-design.html", "Section 4 Mechanical Design 4.1 Parts of a Robotic System 4.2 Mechanisms and Motion 4.3 Levers 4.4 Rotary Motion 4.5 Linear Motion 4.6 Drive Systems 4.7 Computer Aided Design", " Section 4 Mechanical Design The inspiration for this course at Windsor High School is actually a course in the Engineering College at Colorado State Unversity called Mechatronics and Measurement Systems. That course is meant to be one of the capstone courses in the mechanical engineering degree at CSU. In order to complete our capstone project, we will all need to have a solid understanding of the parts of a mechatronic or robotic system. 4.1 Parts of a Robotic System We need to be able to determine what components will be necessary in our robot design. To do this, an overview of the various part types is necessary. We will define the numerous mechanisms that may be used in our designs as well as the component systems that make a robot. At the end of this section, you will create a design on OnShape which will serve as the basis for your capstone project next semester. Use this as an opportunity to start thinking about what you will do in creating a robotic system. Steps to prepare for this work Start thinking about a problem you might like to solve. Is there something at home that could be improved? For example, last year I built a solar powered Raspberry Pi controlled garden watering system. Something like that has a definite use and provides a solution for my wife and I. Now that it works, when we go on vacation we dont worry that our garden gets watered. Look for other examples. A good place to start is the Student Examples from the MECH 307 Course at CSU. Other good sources of inspiration are listed below: SparkFun Projects Examples DigiKey Top 10 DIY Robot Designs Arduino Project Hub Raspberry Pi Robotics Projects In additon, there are many websites that have Raspberry Pi ideas. Your project will need to be unique but you are welcome to draw inspirations, borrow and repurpose code and integrate designs into yours. Even if an online example uses a different control system, it can still be helpful in developing your project. Think about what makes you excited to do this project. What would you have fun doing for four months next semester? Write down some ideas so that, you may come back to them later as you learn more. ASSIGNMENT 4.1.0: Capstone Project Launch Spend some time researching how you might be able to create your capstone project (You will work on this project in the Spring). To get the ball rolling on this project complete the following steps: Read over the full assignment requirements. Log in to your Github Account and create a new repository for keeping all of your files. Name the Repo Capstone Project. In the README.md file write a full paragraph description of what you intend to create. You will definitely revise this as time goes on but this file may be used as a notepad for now. Complete the Capstone Project Launch Form. Now that we have some ideas, lets learn about the various types of parts available to us. 4.1.1 Power Supply A major consideration is power. Most of the systems we design need to be efficient in their use of power. We are not always able to connect to an outlet. For example, home surveillance cameras are small and easy to install in many different locations. However, if we had to connect them to an AC power source, the list of possible locations for installation could be greatly reduced. The solution is a battery pack. How do we decide which battery though? A surveillance camera might need to run for weeks at a time without changing the battery. As a result, a high quality lithium ion source would probably make the most sense. The drawback to this compact and powerful design is, of course, price. These are the types of trade-offs we must consider. Power Supplies might include: DC Wall adapters Sealed Lead Acid Batteries Pre-built battery packs Solar panels As we see, there are many options and considerations. Only by determining total power needs, space and weight constraints and budget can we select the correct source. For now, consider power needs first. As you get closer to the start of your project you can narrow down your choices. ASSIGNMENT 4.1.1: Capstone Power Supply Considerations Lets examine our options for power supplies in regards to the Capstone Project: Read over the article, How To Choose a Power Supply for Electronic Projects. Read over How To Plan Your Circuit With Power Consumption In Mind. Complete the Power Supply Selection Form. 4.1.2 Actuators TAKE NOTE! In the next two sections, you will be running some code on your Raspberry Pi in order to test out the actuators and sensors. If you have not done so already, review the section of this text titled Controlling the Raspberry Pi with Your Chromebook and a USB Cable. Most robots move and interact with the physical world. We will not make that distinction here although there are many who believe that this is a requirement. A robotic car system has many actuation systems. The most notable of these is the drive system. Through the wheels and transmission the motor interacts with the surface the robot is on to propel the robot. Any device creating motion in this way is an actuator. Like power supplies, actuator selection meets many criteria. A look at the RobotShop Actuator Page reveals hundreds of possibilities. DC Motors Servos Stepper Motors Linear Slides From these fours types of actuators, most robotic systems may develop a way of interacting with the environment. 4.1.2.1 DC Motors The simplest actuator we have is a DC motor. A Direct Current (DC) motor is a motor that turns energy from a direct current and turns this into mechanical energy. The first DC motor was developed around the 1830s-1840s. They were commercially unsuccessful, because these motors were battry powered and batteries were still very expensive and the quality was low. When the electrical grid was created and the rechargeable batteries were invented in the late 1800s this all changed. The first commercially viable DC motors entered the market. DC motors have been improved continuously, but other types of motors, like the BLDC motor, have been developed in the meantime too. As a result, the use of brushed Direct Current motors in several applications is limited today. How a DC Motor Actually Works The rotor is normally located on the inside of the motor, while the stator is located on the outside. The rotor contains coil windings that are powered by the DC current and the stator contains either permanent magnets or electromagnetic windings. When the motor is powered by DC current, a magnetic field is created within the stator, attracting and repelling the magnets on the rotor. This causes the rotor to start rotating. To keep the rotor rotating, the motor has a commutator. When the rotor aligns with the magnetic field, it would stop spinning, but in this case the commutator would reverse the current through the stator and this way reverse the magnetic field. This way the rotor can keep spinning. Advantages and Disadvantages of a DC Motor When it comes to starting and regulating speed, brushed DC motors have a good performance. The torque density is relatively high for these motors. A Direct Current motor runs smoothly and the range of speed regulation is wide. The overload capability is strong and the electromagnetic interference is small. A disadvantage of the DC motor is the structure. There is a sliding contact between the commutator and the brush. This causes sparks and mechanical wear. Direct Current motors have relatively short life expectancy because of this and the motor has high maintenance cost. It also raises reliability concerns. ASSIGNMENT 4.1.2: Controlling a DC Motor This simple group assignment demonstrates basic control of a DC motor using an alternate power source. Be sure you have all of the required components: DC Motor with power leads Power Supply with alligator clips connected to the appropriate posts Digital multimeter Follow the instructions in the assignment titiled Lab - DC Motor Control. 4.1.2.2 Servos Servo motors have been around for a long time and are utilized in many applications. They are small in size but pack a big punch and are very energy-efficient. These features allow them to be used to operate remote-controlled or radio-controlled toy cars, robots and airplanes. Servo motors are also used in industrial applications, robotics, in-line manufacturing, pharmaceutics and food services. The servo circuitry is built right inside the motor unit and has a positionable shaft, which usually is fitted with a gear. The motor is controlled with an electric signal which determines the amount of movement of the shaft. Whats inside the servo? To fully understand how the servo works, you need to take a look under the hood. Inside there is a pretty simple set-up: a small DC motor, potentiometer, and a control circuit. The motor is attached by gears to the control wheel. As the motor rotates, the potentiometers resistance changes, so the control circuit can precisely regulate how much movement there is and in which direction. When the shaft of the motor is at the desired position, power supplied to the motor is stopped. If not, the motor is turned in the appropriate direction. The desired position is sent via electrical pulses through the signal wire. The motors speed is proportional to the difference between its actual position and desired position. So if the motor is near the desired position, it will turn slowly, otherwise it will turn fast. This is called proportional control. This means the motor will only run as hard as necessary to accomplish the task at hand. Servos are controlled by sending an electrical pulse of variable width, or pulse width modulation (PWM), through the control wire. There is a minimum pulse, a maximum pulse, and a repetition rate. A servo motor can usually only turn 90° in either direction for a total of 180° movement. The motors neutral position is defined as the position where the servo has the same amount of potential rotation in the both the clockwise or counter-clockwise direction. The PWM sent to the motor determines position of the shaft, and based on the duration of the pulse sent via the control wire; the rotor will turn to the desired position. The servo motor expects to see a pulse every 20 milliseconds (ms) and the length of the pulse will determine how far the motor turns. For example, a 1.5ms pulse will make the motor turn to the 90° position. Shorter than 1.5ms moves it in the counter clockwise direction toward the 0° position, and any longer than 1.5ms will turn the servo in a clockwise direction toward the 180° position. When these servos are commanded to move, they will move to the position and hold that position. If an external force pushes against the servo while the servo is holding a position, the servo will resist from moving out of that position. The maximum amount of force the servo can exert is called the torque rating of the servo. Servos will not hold their position forever though; the position pulse must be repeated to instruct the servo to stay in position. Advantages and Disadvantages of a Servo Because servo motors have an integrated circuit with logic controls they will increase the amount of current drawn as the load on the coil so there is no out-of-step condition. This also allows for high speed operation of the motor. Servos can tend to lag in their rotation so high precision control is not likely. Servos also are not suitable for loads that are as heavy as comparable simple DC and stepper motors. When stopped, the motors rotor continues to move back and forth one pulse. So that, it is not suitable if you need to prevent vibration. ASSIGNMENT 4.1.3: Controlling a Servo For this assignment you will learn some basic servo control through the Python environment on your Raspberry Pi. You will need your servo motor and three m-f jumper wires (red, black and one other color). Follow the instructions in the assignment titiled Raspberry Pi Lab - Servo Control. 4.1.2.3 Stepper Motors How a Stepper Motor Actually Works Stepper motors are DC motors that move in discrete steps. They have multiple coils that are organized in groups called phases. By energizing each phase in sequence, the motor will rotate, one step at a time. With a computer controlled stepping you can achieve very precise positioning and/or speed control. For this reason, stepper motors are the motor of choice for many precision motion control applications. Stepper motors come in many different sizes and styles and electrical characteristics. Animation of a simplified stepper motor (unipolar) Frame 1: The top electromagnet (1) is turned on, attracting the nearest teeth of the gear-shaped iron rotor. With the teeth aligned to electromagnet 1, they will be slightly offset from right electromagnet (2). Frame 2: The top electromagnet (1) is turned off, and the right electromagnet (2) is energized, pulling the teeth into alignment with it. This results in a rotation of 3.6° in this example. Frame 3: The bottom electromagnet (3) is energized; another 3.6° rotation occurs. Frame 4: The left electromagnet (4) is energized, rotating again by 3.6°. When the top electromagnet (1) is again enabled, the rotor will have rotated by one tooth position; since there are 25 teeth, it will take 100 steps to make a full rotation in this example.. Advantages and Disadvantages of a Stepper Motor Since the percentage step error does not accumulate as the motor rotates, it is able to run at wide range of speeds and ranges, including very slow speeds without reduction gearing. Stepper motor provide excellent response during start, stop and reverse mode. They are highly reliable since no brushes or commutators are used. Stepper motor control circuits are simple and low cost. However, Resonance occurs if it is not properly controlled and progressive loss of torque at high speeds may occur. Hence it is not easy to operate at extremely high speeds. ASSIGNMENT 4.1.4: Controlling a Stepper Motor Make a lab for the Stepper motor. Follow the instructions in the assignment titiled Raspberry Pi Lab - Stepper Motor Control. 4.1.2.4 Linear Actuators and Lead Screws A linear actuator is an actuator that creates motion in a straight line, in contrast to the circular motion of a conventional electric motor. Linear actuators are used in machine tools and industrial machinery, in computer peripherals such as disk drives and printers, in valves and dampers, and in many other places where linear motion is required. Hydraulic or pneumatic cylinders inherently produce linear motion. Conceptual design of a basic traveling-nut linear actuator. Note that in this example the lead screw (gray) rotates while the lead nut (yellow) and tube (red) do not. 4.1.3 Sensors There are even more sensor types than there are actuator types. If we browse the Adafruit Sensor Page we see how limitless these possibilities are. For any type of sensor application there is, someone has though of a way to build it. As this excerpt from a robotics text explains, sensors are either proprioceptive or exteroceptive and, at the same time, either passive or active. This chart is taken from that text: A passive sensor is one which just listens to what is happening. Examples include: - A light sensor which detects if a light is shining on it - An infra-red sensor which detects the temperature of an object Sensors that send information to the environment and receive a response from that signal are known as active sensors. ASSIGNMENT 4.1.?: Comparing Sensor Types From your kit select the following sensors: Limit switch Ultrasonic sensor Humiture sensor Follow the instructions in the assignment titiled Raspberry Pi Lab - Comparing Sensors. 4.1.4 Control Systems For most students, the Raspberry Pi will function as the control system for the course. This is basically because we are learning to use it in class. Students learn to interact with the Pi using the command line and Python. In addition, the Raspberry Pi offers many advantages over other microprocessors like Arduinos. One of the main advantages is the built in wifi capabilities. This allows for remote programming and true Internet of Things (IoT) capabilites. Still, some may choose a different processor, maybe even a different version of the Pi. A Raspberry Pi Zero W is an extremely compact and low cost alternative to the Rapberry Pi 4 we use in class. It is made for low-power, compact IoT applicaitons and should be considered. While the processor speed is slower than larger Pis, it might be just the fit for your project. The Raspberry Pi Foundation released a new microcontroller in the last year called the Pico. It is a great alternative if a full OS is not needed on your project. If you can just flash the memory and let it run, a microcontroller may be a good choice - not to mention, they are very inexpensive. Other control options, like the world famous Arduino, are available as well. This list is quite extensive and should be considered. A third option is to build a control system from the ground up using a microprocessor and adding the necessary components to it. While this option is less likely, some students may find this as a requirement in a future college class so it is good to understand what this option involves. The reading below discusses these devices. Now it is time to start thinking about how you will eventually control your project by evaluating your options. ASSIGNMENT 4.?.?: Control Systems Overview View this video. This is a video of a lecture given. While it is a little dry, it is an exceptional overview of MCUs and SBCs. Make a chart which lists all the major MCU and SBCs from the blog article above. (Use the template that has been shared with you) Complete the chart by researching the differences between them all. Write a summary of why you would use each one with examples. Finally, make a guess as to which one you think you will use for your capstone project next semester. 4.1.5 Structural Parts The skeleton of the robotic system determines the physical constraints on the design. For years now, our robotics team has dealth with this issue. Several years ago they were presented with a challenge in the competition which required their robot to climb a mountain: As we can see from the photograph, the mountain was quite daunting. The previous year, the team had advanced to the world championships and found that their robot, while the best design in Colorado, was not suited to compete with the heavier robots beyond the state. As a result they had been pushed around a bit and not been very successful. The solution to this was to weld a steel frame together and build the robot off of that. The result was a 70 pound robot! Without thinking more deeply about the design of the current year, they had hampered themselves by dealing with the previous yesrs challenge in mind. The robot was robust and strong but could not climb the mountain. Instead, every tread system they tried to use to climb was under so much strain that it eventually broke. They would even 3D print treads made out of high strength plastics that still could not hold up to the strain. In this case, the structural parts let them down. What a great learning experience that was. All three of those students in the photo are in science and engineering programs currently in college. The one on the right, Mitchell Watson, is literally going to be a rocket scientist when he graduates for Cal Tech. Understanding these concepts of mechanical design are not only fundamental to robotics, they can lead to many great opportunities. There are many options for structural parts. Over the years, we have accumulated a wealth of parts in our program which may be checked out. In addition, we have plenty of scrap material (we hated that mountain so much that we cut it up at the end of the season and have been using it for scrap since then). After you learn how to use CAD later in this unit, you will be able to design and print your own custom parts as well. The type of material matters. Begin with this materials guide in selecting your parts. Consider using pre-built kits or components. Here is a list of companies that provide robotics parts: Pitsco Education: Many different types of parts from a long-time vendor REV Robotics: Higher quality aluminum and high grade plastic parts GoBilda: Awesome parts for large applications 80/20 Inc.: Incredibly versitile structural systems RobotShop: If you are looking for a kit, to get started SparkFun: Based in Niwot, you can go visit them and pick up your parts or take the tour to get some ideas NOTE: For any vendors, check before you buy. We have educational discounts with most all of them. 4.2 Mechanisms and Motion Mechanisms can be used to change the speed, direction or force required to do something. Mechanisms may be able to help you but they cannot do it on their own. 4.2.1 Inputs and Outputs Machines need energy and someone or something to operate them. In mechatronics we utilze actuators attached to a control system for the source of the energy. The energy that is used by a machine is called the input. The result of this energy input is called the output. While it is not a robotic system, a mechanism such as a bicycle can be explained with the diagram below. 4.2.2 Types of Motion Mechanisms are concerned with motion. There are four main types of motion. These can be illustrated by means of human body movements. Motion that is transferred along a line is known as linear motion. Utilizing this system allows robotic designs to extend reach in all directions but is mainly used in attaining more height or reaching horizontally. Motion which is a repetitive up-and-down or back-and-forth linear motion is known as reciprocating motion. This movement is commonly used in pumps. Rotary motion is a circular movement of an object around a center (or point) of rotation and is the most commonly used motion in robotic systems. Drive systems are usually based in rotary motion but other systems utilize it as well including lifting and collecting mechanisms. Pendulums represent one application of oscillating motion which are used in robotics systems. ASSIGNMENT 4.2.0: Mechanisms in Motion Creating robotic motion begins with an understanding of the various types of motion. For this assignment you will seek out unique, robotic applications which illustrate the four types of mechanical motion discussed in this section. Follow the instructions in the assignment titiled Mechanical Motion Overview. 4.3 Levers One of the oldest mechanisms is the lever. Stone Age people used them to move large objects. A lever can be described as a long rigid object with a pivot point somewhere along its length. The pivot is a fixed point about which the lever rotates. The pivot is also known as the fulcrum. Levers are used to do two things: they can move a large load with only a little effort, or they can increase or amplify movement. A seesaw is a simple example of a lever. 4.3.1 Classes and Categories Levers are classified by the relative positions of the fulcrum (the point of fixed pivot), effort (the input force) and resistance (or load). It is common to call the input force the effort and the output force the load or the resistance. This allows the identification of three classes of levers by the relative locations of the fulcrum, the resistance and the effort. With a class one lever, the fulcrum is between the effort and resistance. The effort is applied on one side of the fulcrum and the resistance (or load) on the other side, for example, a seesaw, a crowbar or a pair of scissors, a common balance , a claw hammer. Mechanical advantage may be greater than, less than, or equal to 1. A class two lever places resistance (or load) between the effort and fulcrum. The effort is applied on one side of the resistance and the fulcrum is located on the other side, e.g. in a wheelbarrow, a nutcracker, a bottle opener or the brake pedal of a car, the load arm is smaller than the effort arm, and the mechanical advantage is always greater than one. It is also called force multiplier lever. Utilizing a class three lever places the effort between the fulcrum and resistance. The resistance (or load) is on one side of the effort and the fulcrum is located on the other side, for example, a pair of tweezers, a hammer, a pair of tongs, fishing rod, common balance or the mandible of our skull. The effort arm is smaller than the load arm. Mechanical advantage is always less than 1. It is also called speed multiplier lever. 4.3.2 Mechanical Advantage We use levers every day because they make it is easier to get work done. They give us mechanical advantage (MA) which means that you can move a large load using a small effort. The MA in the example below is found by comparing the weight of the load with the effort needed to move it. (Remember 1kg = 10 Newton) \\[MA=(Load/Effort)=300N/100N=3:1 = 3\\] If you look at wheelbarrow example again you will see that the distance the effort has to move is much further that that of the load. By comparing the two distances you get the velocity ratio (VR). \\[VR=(D_2/D_1)=400mm/100mm=4:1=4\\] 4.3.3 Efficiency Mechanisms are not always 100% efficient due to factors such as parts that bend, friction etc. The scientific formula for the calculation of the efficiency of a mechanism is as follows: \\[Efficiency = (MA/VR)*100\\%\\] For the example of the wheel barrow above we can calculate efficiency using this formula. \\[Efficiency=(3/4)*100\\%=75\\%\\] 4.3.4 Moments If a seesaw is not moving but remains level, it is said to be balanced. The forces on either side of the fulcrum are equal and opposite. If the force on one end of the seesaw is greater than the other, or if the fulcrum is not in the center, then the seesaw will rotate around the fulcrum. This turning force is known as a moment. Moments can be used to work out unknown weights or distances of movement. The figure below shows how to calculate the moment for a very large spanner. We can calculate ways to create a balanced situation by applying these principles. Consider the seesaw example here: ASSIGNMENT 4.3.0: Lever Design Mechanical advantage may be attained by utilizing one of the oldest machines in human history, the lever. For this assighment you and your partner will build several levers, calculate mechanical advantage for each one and then test your results. Finally, you will consider real-world applications of these systems. Follow the instructions in the assignment titiled Gaining the Advantage with Levers. 4.4 Rotary Motion A rotation is a circular movement of an object around a center (or point) of rotation. The geometric plane along which the rotation occurs is called the rotation plane, and the imaginary line extending from the center and perpendicular to the rotation plane is called the rotation axis. A three-dimensional object can always be rotated about an infinite number of rotation axes. 4.4.1 Pulleys, Sprockets and Gears Pulleys, sprockets and gears are used to transfer rotary motion from one place to another. All are wheels. Pulleys are wheels with grooves in the rims, in which a belt or rope can run. Pulleys can transfer rotary motion from one shaft to another or can be used to lift heavy loads. Gears are wheels with teeth evenly spaced around the rims. Several gears can be placed, so that their teeth interlock, or mesh. When two or more gears are used together, they form what is called a gear train. Gears can be used to change the speed and direction in which something rotates. When chains are used to connect the gears, a chain and sprocket system is formed, for example on bicycles and motorcycles. Sprocket systems share properties of both of the other systems. In the figure below, the direction of rotation of the pulleys is the same for each pulley. The driver pulley is attached to the drive system (input) while the driven pulley is attached to the actuational output. The mechanical advantage is gained by the variation in the size (diameter) of the pulleys. This mechanical advantage may be used to increase either velocity of rotation or torque (rotational force). The next figure illustrates a pulley system which switches the direction of each pulley. All calculations made on a twisted pulley are the same as a simple pulley system. Unlike pulleys, the driven gear which is attached to the actuation device (input) rotates in the opposite direction as the driver gear which is attached to the acutational output. By placing an idler gear of the same size as either of the other two gears, the direction of the driven gear may be reversed so that it rotates in the same way as the driver gear without changing the rotational speed or torque of the output. This configureation is known as a gear train. In order to increase the velocity ratio or mechanical advantage of a pulley or gear system, compound pulley and gear trains may be constructed. A NOTE ABOUT SPROCKETS AND CHAINS: As previously mentioned, sprockets and chains combine characteristics of the both gears and pulleys. While the driver sprocket and the driven sprocket move in the same direction like pulleys, they have teeth which a chain can fit into to provide added stregth to the system, as in the case of gears. Considerations for choosing the correct system for your application are below: Advantages of tooth gears and chains: Greater forces can be transferred Chains do not slip/slide Chains can be disassembled for removal Advantages of pulleys and belts: Belts are not noisy Belts can be stretched for fitting and for removal Crossed belts can change the direction of rotation All of the formulas in the next section are the same for sprockets as for pulleys and gears. Typically, the number of teeth on the sprocket are used to calculate the velocity ratio as in the case of gears. The illustration below shows gears fixed to parallel shafts, forming a simple gear train. The gear fixed on the drive shaft is called the driver gear and is connected to the driven gear. The shafts will turn in opposite directions and, because the gears have different sizes, they will turn at different speeds. The difference in their speeds (velocity ratio) can be calculated from the number of teeth on the driver gear (Teeth1) compared to the driven gear (Teeth2). \\[VR = (Teeth_2/Teeth_1) = (40/20) = 2:1\\] The velocity ratio (VR) in this example may be expressed as 2:1 (say two to one) or simply as 2. This means that in this case the driver shaft must turn twice for the driven shaft to complete one turn. Similarly, the velocity ratio of a pulley system may be calculated with essentially the same formula. Pulley systems use a belt to transmit motion and force from the driver shaft to the driven shaft. Cars use a pulley system with V-belts running in grooves on the pulley wheels. Speed changes are made by using different sizes of pulleys on the driver and driven shafts respectively. By comparing the sizes of the two pulleys you can calculate the velocity ratio (VR) of the system. Instead of using the number of teeth, the difference in pulley speeds can be calculated by comparing the diameter of the driver pulley (Size1) to the diameter of the driven pulley (Size2). \\[VR = (Size_2/Size_1)=(25/100)=1:4\\] The velocity ration in this example is expressed as 1:4. This means that one turn of the driver shaft will give four turns of the driven shaft. Once we know the velocity ratio of the gears we are working with, we can begin to predict output speed (SO) for a given input speed (SI). \\[S_O=(S_I/VR)=(2000rpm/3:1)=6000rpm\\] In this case the velocity ratio is 3:1 and the input speed is 2000 revolutions per minute (rpm). The resulting output speed is 6,000 rpm. The Bevel Gear A special class of gears known as bevel gears may be used to change the axis of rotation of a rotary motion system. Bevel gears may be used where the axes of the two shafts intersect and the tooth-bearing faces of the gears themselves are conically shaped. Bevel gears are most often mounted on shafts that are 90 degrees apart, but can be designed to work at other angles as well. The pitch surface of bevel gears is a cone. Common applications of this may be seen in automobies. The easiest to recognise is the rear differential as seen below. Worm Drives A worm drive is a gear arrangement in which a worm (which is a gear in the form of a screw) meshes with a worm wheel (which is similar in appearance to a spur gear). The two elements are also called the worm screw and worm gear. ASSIGNMENT 4.4.0: Rotary Advantage Learning to utilize various rotary motion systems can allow us to leverage the laws of physics. In this assignment we will explore various rotational force systems to increase both speed and torgue. Follow the instructions in the assignment titiled Pulleys-Sprockets-Gears in Action. 4.5 Linear Motion Linear motion is the most basic of all motion. According to Newtons first law of motion, objects that do not experience any net force will continue to move in a straight line with a constant velocity until they are subjected to a net force. Under everyday circumstances, external forces such as gravity and friction can cause an object to change the direction of its motion, so that its motion cannot be described as linear. A unique challenge in a robotic system is converting rotary motion to linear motion. There are two mahory systmes for accomplishing this task as outlined below. 4.5.1 Rack and Pinion Systems A rack and pinion is a type of linear actuator that comprises a circular gear (the pinion) engaging a linear gear (the rack), which operate to translate rotational motion into linear motion. Driving the pinion into rotation causes the rack to be driven linearly. Driving the rack linearly will cause the pinion to be driven into a rotation. A rack and pinion drive can use both straight and helical gears. Helical gears are preferred due to their quieter operation and higher load bearing capacity. The maximum force that can be transmitted in a rack and pinion mechanism is determined by the tooth pitch and the size of the pinion. 4.5.2 Lead Screws A lead screw, also known as a power screw or translation screw, is a screw used as a linkage in a machine, to translate turning motion into linear motion. Because of the large area of sliding contact between their male and female members, screw threads have larger frictional energy losses compared to other linkages. They are not typically used to carry high power, but more for intermittent use in low power actuator and positioner mechanisms. Lead screws are commonly used in linear actuators, machine slides (such as in machine tools), vises, presses, and jacks. Lead screws are a common component in electric linear actuators. The linear actuator described above utilizes a lead screw to turn rotational force into linear force. ASSIGNMENT 4.5.0: Potential Linear Motion Applications Learning to utilize various rotary motion systems can allow us to leverage the laws of physics. In this assignment we will explore various rotational force systems to increase both speed and torgue. Follow the instructions in the assignment titiled Applyting Linear Motion. 4.6 Drive Systems The purpose of the drivetrain is to facilitate the movement of the robot, and thus is crucial to the overall function of the robot. If the drivetrain doesnt work, the rest of the robot wont work either. When building any mechanism, it is wise to list some necessities or desired features. 4.6.1 Factors to Consider Reliability: Reliability starts with the drivetrain, the foundation to any robot. One aspect of reliability to consider is the type of motor and gearbox that is used in the drivetrain. One should always consider how much load will be placed on the system and select accordingly. Agility: There are many factors to agility: top speed, acceleration, turning radius, turn speed, and ability to strafe. Note that turning radius is an often overlooked feature that is critical to the overall agility of the drivetrain. Traction/Pushing Power: While this feature is often overemphasized, it is still very important. Pushing power describes a drivetrains ability to endure defense/engage in defense. In addition, traction will be important if the drivetrain must traverse obstacles or some sort of terrain. Many factors affect the pushing power of a drivetrain, including wheel type, motor gearing, and overall weight of the robot. Powering the drivetrain: Generally, there are four options for power transmission: direct drive, chain, gear, and belt. Direct drive systems place the wheel directly on the motor shaft. This has the disadvantage of subjecting that gearbox to unusual amounts of stress. If possibel, indirect transmissions such as belts and chains are preferred. ASSIGNMENTs 4.6.0: Examining Drivetrain Systems Since many students will chose to build a mobile robotic platform at some point, it is useful to examine the various mobile systems. One organization which competes in the First Tech Challenge has compiled an overview of many types of drivetrains. We will use that resource as the basis for our study of drivetrain systems. Take a look at these various drivetrain systems commonly used on robots: Tank (Skid-Steer) Drivetrains 2 Wheel Drive (Pushbot Drive) 4 Wheel Drive 4 Wheel Drive 6 Wheel Drive 8 Wheel Drive Tread Drive Holonomic Drivetrains Mecanum Drive X-Drive H-Drive Pick the two that are most interesting to you. In two well-developed paragraphs, describe the drivetrains and explain the advantages and disadvantages of those drive systems. Compare the various applications which would make one or the other more desirable. Include correct usage of the four factors to consider listed above in your paragraph in order to demonstrate your understanding of those concepts. 4.7 Computer Aided Design The concepts learned in this unit require planning and modeling to implement effectively. It is useful to tinker with mechanical parts in order to be able to visualize the system itself. All engineering, however, includes a significant design element. In most cases, we need to sketch out our design on a piece of paper or board to give the solution to our problem some conceptual scale. Once you have your design down on paper, it is time to create it like a real mechatronics engineer. For this section you will learn to use OnShape, a modern and full-scale computer aided design (CAD) system. OnShape was founded by two engineers at SolidWorks which is still considered the gold standard of CAD. SolidWorks comes with a hefty price tag, even for students. OnShape is free to secondary schools. As a result, we will use it. Once year learn this tool, switching to other CAD software will be relatively painless. In addition, it is entirely web based so you can use it as long as you have an internet connection and a web browser. If you have not done so already, head to the OnShape Account Setup section of the course book. Follow those instructions. After you have done this, log on to your account and follow these instructions: Click on the Learning Center Button Select Self-Paced Courses &gt; Learning Pathways Select OnShape Fundamentals: CAD ASSIGNMENTs 4.7.0: CAD Fundamentals For this part of our course you may move at your own pace to complete these assignments. Each one requires you to work through the CAD concepts and skills listed in the OnShape courses below. Complete the first five courses in this learning pathway: Navigating Onshape Introduction to Sketching Part Design Using Part Studios Multi-Part Part Studios Onshape Assemblies "],["python-programming.html", "Section 5 Python Programming 5.1 Setting up the Raspberry Pi 5.2 The parts of the RPi and Pinout 5.3 Why Python? 5.4 Hello, Worldand a Little More 5.5 Functions 5.6 Conditionals 5.7 Iteration", " Section 5 Python Programming Finally! We are going to start learning how to make the Raspberry Pi control components like lights and motors and receive input from sensors. This is what will make your creations become real robots. For this unit we will refer to the course programming text quite often. Many of the programming problems come from the Downey text as well. For all of your assignments in this section you will start here though. Learn the basic concepts of that assignment, read more about it on the course text, go to GitHub Classroom to practice the program and finally, transfer what you have learned to the Raspberry Pi. Lets get started by setting up the Pi and learning more about Python and its wide range of applications. 5.1 Setting up the Raspberry Pi These procedures are for students in the Robotics Engineering course at Windsor High School. As such, some of the initial steps required in setting up a Raspberry Pi have already been completed. If you are using a new, out of the box, Pi refer to one of the many tutorials online. Equipment Needed: Raspberry Pi 3B+ 5V | 2.5A power supply 32GB Micro SD card with pre-installed Linux based OS Monitor HDMI cable Keyboard Mouse Optional: Windows, iOS or Linux Computer (not a Chromebook) Connection to a LAN. In the lab this is Mechlab. At home it is your router. NOTE: For the initial setup we will use the monitor, keyboard and mouse. Eventually, we will only use the command line functions which will allow you to eliminate those components and control the Pi from your laptop remotely if you choose. If not, you can use the Pi as a computer itself but just enter the command line controls of the Linux terminal. Eventually, you will need to be able to do this though as we will disconnect the Pi from all physical I/O devices and make it the brains of a self-sufficient robotic system. 5.1.1 Putting the Pi Together To begin, assemble the Pi by putting the SD card in the slot. Connect the monitor to the HDMI port, and the keyboard and mouse to the USB ports. Plug in the power cord and turn it on. (Create a custom background for the RPi and install all of the programs needed for the class.) 5.1.2 Controlling the Pi with SSH For many, it may be easiest just to use the Raspberry Pi as a standalone computer. In order to do this one just needs to keep the Pi connected to a monitor, keyboard and mouse. One of the main advantages of this is that one can just turn on the Pi, wait for the boot sequence to finish and start programming using the terminal. Another advantage is that other programming interfaces may be used such as Notepad++ which has built in code highlighting and markup functions that make programming in Python, and other languages, easier. More advanced users might even choose to install an interface like PyCharm which has even more functions aimed at enhancing the programming experience and may be connected to Git or an online code repository like GitHub. Maybe the biggest advantage of programming from the Pi desktop environment is that a web browser may be easily used alongside the command line terminal or programming interface. Eventually though, we will all need to sever our connection to the peripherals. Imagine trying to test out a mobile robot system with the monitor still attached. When we make the switch we start interacting with the Pi through SSH (Secure Shell). This concept is not as difficult to understand as one might think. Essentially you are accessing the terminal window for the Pi through another computer using a piece of software like Putty. When both devices are connected to the same router, this is a fairly simple process. While we will not require this yet, it is strongly recommended that every student go over this process which is detailed in the section titled [Controlling the Raspberry Pi Remotely] in the last chapter of this book sometime in the first semester. The Capstone project will require this so we might as well get used to it now. Most will probably switch back and forth between using the Pi as a desktop computer and accessing it via SSH. 5.2 The parts of the RPi and Pinout Lets examine the parts of this tiny computer that you will be using for the rest of the yearit is really quite amazing how much can be packed on the small device. There are several things worth noting here about the Pi: While it is possible to power the device with a micro USB power supply that provides only 1A of current (older Android phones use this), it is best to use the full 2-2.5A power supply, especially when we start hooking up components to the GPIO pins Be careful not to short two GPIO pins together or connect an external DC power supply incorrectly to one of the GPIO pins. These actions can damage essential components of the Pi. TBC A powerful feature of the Raspberry Pi is the row of GPIO (general-purpose input/output) pins along the top edge of the board. There are 40 pins which we can use for a wide range of robotics applications. It is important to remember which pins are which as the locations do not represent the GPIO labels. If you forget or cannot find this diagram, use the command line in the terminal. This is as good a place as any to start using the terminal. Before the introduction of the Apple Lisa with a graphical user interface (GUI), all computers used something like the terminal as the interface with humans. All computers still contain a terminal. The Raspberry Pi OS we are using is based on the Linux kernel so we will use Linux commands but the procedure is similar for other systems such as Windows and macOS. With the Raspberry Pi powered on press CTRL+ALT+T to open a terminal session. After the terminal opens, type the following command: pinout You should see something like this in the terminal: Any of the GPIO pins can be designated (in software) as an input or output pin and used for a wide range of purposes. We will use them to send and receive electrical signals. Two 5V pins and two 3V3 pins are present on the board, as well as a number of ground pins (0V), which are unconfigurable. The remaining pins are all general purpose 3V3 pins, meaning outputs are set to 3V3 and inputs are 3V3-tolerant. A GPIO pin designated as an output pin can be set to high (3V3) or low (0V). In addition pins GPIO12, GPIO13, GPIO18, GPIO19 may also be used with Pulse Width Modulation (PWM). A GPIO pin designated as an input pin can be read as high (3V3) or low (0V). This is made easier with the use of internal pull-up or pull-down resistors. Pins GPIO2 and GPIO3 have fixed pull-up resistors, but for other pins this can be configured in software. It is possible to control GPIO pins using a number of programming languages and tools. For this course we will use Bash, the scripting language of Linux, and Python. NOTE: Before you start your first programming assignment realize that in order to progress in this course you must fully learn the information in the text. If you skim or rush through you might be able to get many answers on the chapter quiz correct but you will miss many of the points. Programming is hard and learning to program is as well. It does not mean it is impossible. It just requires work. Take your time and make sure you are understanding what you read. If not, do the following: Re-read the section. Ask someone else in the class for clarification. Google your question Ask your instructor This is good advice for all courses, especially the further you go in school. Many of you will go so far in college that you basically stop taking classes and just learn on your own for the sake of understanding something. Assignment 5.2 For this assignment you will learn some basic commands and functions in Linux and how to find out how to use them. Open up a terminal on your Raspberry Pi as before. Type the following: help This is a list of all the built in functions that come with this version of Linux. As you add more packages and create your own functions this list will get larger. If you scroll to the top your see this message: Type 'help name' to find out more about the function 'name'. Lets try it. One of the functions you will use fairy often is cd. Type help cd and answer the following questions from the information on the screen: In your own words that you understand, what does this function do? (You may need to Google some of the terms like directory to understand what that term means in Linux) If you type cd Desktop what do you think will happen? Now call up the help information for the function if. Why would we ever use this function? Again, you might need to do a little research to understand the vocabulary here. Write down or type your answers so we can discuss them in class next time. 5.3 Why Python? It is worth spending a little time discussing the reasons why Python will be the chosen operating system for this course. Prior to Fall 2020, the course utilized the Arduino UNO as the microprocessor for the robotics systems. The Arduino is also a versatile, fully programmable microcomputer with input and output pins capable of producing and detecting low DC voltages. It utilizes the C++ programming language. There were a few limitations, however, with the Arduino UNO. The biggest advantage of the Pi is the programming interface. Since the Pi is essentially a small Linux computer, applications and environments that function on Linux also function on the Pi. The default scripting language on Linux is called Bash. When you called up the pinout for the Raspberry Pi earlier, you were using Bash. It is a powerful command line interface. Why not just use Bash instead of learning another language within the Linux shell? The main reason for this is Pythons usefulness outside of this class. We know from past experience that almost all of our Robotics Engineering students will go on to some kind of technical field of study in college. While those do not all go in to robotics, they all need to learn new languages. Python is about the most useful language one can learn in high school if planning to go on to a technical degree in college like engineering, computer science, data science or machine learning as well as almost any natural science field of study. It is powerful, easy to learn and widely used. The most recent StackOverflow survey ranked Python 3rd most popular among users. By learning this language, you will be more prepared to take on the challenges of a field of study in college related to robotics. Since one of the main objectives of our program is to help students prepare for post-secondary STEM fields of study, Python is an easy choice. Python is also an interpreted language instead of a compiled language. What is the difference? In order to get a compiled language to run on a computer, the additional step of compiling it into machine code must take place before the device will run the commands of the program. With an interpreted language, a program or virtual machine running on the device (In this case, the Python environment installed on the Raspberry Pi OS) interprets the script written by the programmer directly into machine code. This is a faster process than running a compiled language like C++. Other interpreted languages include Ruby, Java and Perl and good old BASIC (Which many of us adult programmers learned when we were younger on our Commodore 64 or Apple IIe computers). This structure makes Python faster to learn. There are other advantages to the switch to the Pi. The first advantage that the Pi has over the UNO is an onboard wireless internet connection. The Pi can connect to other devices using either 2.4GHz or 5GHz frequencies as well as Bluetooth. The current version also includes a Power over Ethernet (PoE) capability. Making the switch to the Raspberry Pi will allow for more seamless IOT (Internet of Things) activities without the need for an additional board. Second, the Raspberry Pi can actually function like a computer. We can modify the OS easily by modifying the micro SD card used as RAM on the computer. 5.4 Hello, Worldand a Little More It is a tradition in in programming to test out ones ability to program in any language by creating a program called Hello, World!. This dates back to 1974 at Bell Labs. The actual C language code that was written was: main( ) { printf(\"hello, world\\n\"); } In our case, we will do something very similiar. The first program we write will do the same as that one written in 1974. Open a terminal window by pressing CTRL+ALT+T. This will open a window that looks like this: In order to run a command in Python through the terminal we need to set up the Python environment. Type this command into the terminal: python3 This will show a message like this: You know that you are able use Python commands when you get the &gt;&gt;&gt; prompt. This is universal for all Python editors and the specific prompt for Python. We will try two methods of the Hello, World! program. First, we will use the print command. Type the following command into the interpreter: print (\"Hello, World!\") The quotation marks signify that we want to literally display what is directed by the print statement. Try it without the quotes to see what happens. This should produce something like this: This is your first error message. Assignment 5.4 Read the chapter from our text titled, Chapter 1 - The way of the program. While you read the chapter open the Python environment through the Linux terminal on your Raspberry Pi as before. Follow along with the examples from the text as you go. This will help you learn Python more quickly. When you are done reading the chapter complete exercises 1 and 2 at the end of the chapter on your own to make sure you understand what you read. If not, see the Note above. 5.5 Functions As our text states, In the context of programming, a function is a named sequence of statements that performs a computation. When you define a function, you specify the name and the sequence of statements. Later, you can call the function by name. Lets take a look at this sequentially: First, define a function. Second, call the function. What does this look like? Open the Python environment window and define your function like this: Then we call the function like this: So, what happened here? We defined the function say_hello() . Then, we called the function and passed a parameter into the function. Can you tell what the parameter is? Why do we need to know how to use functions? The first reason is that the standard Python 3 library is filled with functions. When you type the command print (\"Hello, World!\") you are calling the built in Python print() function. As you read through the chapter on functions you will see that there are many other examples of useful functions packed into Python. The second reason is to make your programs easier to use. For example, lets say you make a robot that needs to follow this pattern as it drives alone a course. There are many reasons why you might need to do something like this. Maybe the problem to solve is navigating around obstacles. Maybe the robot needs to map a facility that humans cannot get into because of hazardous conditions like radiation. Maybe your robotics teacher just wants you to demonstrate you can use functions. At any rate, functions will make your job as a programmer eaiser. Here is the path the robot will take: How many times does the robot need to make a 90 degree left turn? (nine) Here is an example of how we could execute that turn using Python and our Raspberry Pi (Dont worry about the syntax now, we will get there.) As you will learn, there are other commands that need to be used to set up this program but these four lines are what actually make the Raspberry Pi control the left and right wheels of the robot so that the right wheel moves forward for two seconds while the left wheel stays fixed. This will make the robot turn left. If the two seconds is the correct amount of time, it will make a 90 degree turn. Think about writing the program to just make the robot drive around. You would need to replicate this code nine times. You probably would not retype it nine times. Instead you would copy and paste it. This is known as brute force programming. There are many reasons not to do this. The biggest reason has to do with the third line in our left turn program. What if two seconds is not exactly right? If that is a slight overturn then the robot will go off course with every turn which means we need to go back in and change that value on every sleep() function. What if the battery on the robot is at a different charge level from one day to the next? Again, we will need to change nine lines of code. Remember, we humans are not very good at repetitive tasks. That is what we use computers for - to do things over and over. Why not let the computer do the repetitive stuff? Instead, lets make a function called left_turn() like this: And call it nine times throughout the program with the command left_turn(2) . If we found that it actually takes three seconds instead of two to execute a 90 degree turn then we would just need to change the parameter we pass to the function, represented by the variable sleep_time. In that case, the call would look like this: sleep_time(3). We could even make things simpler yet by defining a variable at the beginning of the program to represent the number of seconds we want to sleep during the turn - something like turn_sleep_time = 2 . Then, we would call the function like this: left_turn(turn_sleep_time) Now, every time we change the variable turn_sleep_time we are changing the parameter passed to the function everywhere in the program. We have gone from changing nine different lines of code to changing just one. This gets really impressive when we think about all the right turns we have to make as well. See how functions are an integral part of robotics? Every modern programming language uses functions. Once you learn it for Python you can use it in other languages as well with only minor changes to syntax. If we write programs that need to repeat a process nine times, functions save us a lot of work and potential errors. If we need our robot to do something nine hundred times or nine million times we have to use them. Now lets spend some time learning more about the functions built in to Python using our text: Assignment 5.5 Read the chapter from our text titled, Chapter 3 - Functions. While you read the chapter open the Python environment through the Linux terminal on your Raspberry Pi as before. Follow along with the examples from the text as you go. This will help you learn Python more quickly. When you are done reading the chapter complete exercises 1, 2 and 3 at the end of the chapter on your own to make sure you understand what you read. If not, see the Note above. 5.6 Conditionals Besides completing repetitive tasks for us humans, robots need to be able to make decisions based on the condition of their environment. Later, we will learn how to use sensors to understand what is happening in a robots environment. First, we will learn how conditional statements work in Python. If you have not already done so, it might be helpful to get a little background on computer logic. The inventor of the logical system we use in robotics was George Boole. There is a video in the Supplemental Videos section of this book about his contributions to the field. For now, we will concern ourselves with some basic logical or Boolean operators. These are different than mathematical operators. When we write the following statement using mathematical operators: x = 6 we are making a statement that the variable x is equal to the integer 6. By contrast, when we use the same operator (=) in logical math we are asking Is one equal to the other? We script that questions like this: x == 6 Notice that we use 2 = signs instead of one. This is not a typo. In fact, it is universal across many programming languages. Instead of declaring x is equal to 6, it is asking Is x equal to 6? What are the possible answers to this question? For the answer, read section 5.2 of our text. Notice that there are many other logical (aka relational) operators. We can use these operators which return a value of true or false to help our robots make decisions. To do this we use functions like the if() statement. Lets try it out using another Python function len(). We will create a function that determines if a word is longer than seven letters. If so, a message will be displayed saying so. If not, a different message will be displayed. Before you read how to do this, see if you can figure it out. Follow these steps using the textbook as a guide: Define your function and pass a parameter through that is the word you are going to test. Write a conditional statement using the len() Python function to determine the length of the word. Use the print() function to return a statement that says if it is or is not a long word (greater than seven letters long). See if you can include the word in the message returned by the function Here is one way to do it: Notice that we pass the word to the function by using the parameter word which then stores the string representing our word as a variable. The if statement checks the length of the word using the len() function which returns an integer equal to the number of alphanumeric characters in a string (our word). If that value is greater than or equal to nine, one message is printed. Since the only other possibility for the length of this word (if it is not greater than or equal to nine) is that it is less than nine letters, we can use the else function to print a different message. Try it out now by typing this function into the terminal under the Python environment and calling the function using different words. You will probably get some Traceback errors the first time you do but stick with it. When you are done compare your result to the results below: Think of the possibilities now. What could your robot do with this new power! If we go back to our example in the previous section in which our robot had to navigate around obstacles by turning 90 degrees at a time we can see some interesting solutions. If we could use a compass sensor to determine the angle of our robot in relation to magnetic north, we could use conditional statments to turn the robot. Instead of trying to figure out exactly how long it takes for the robot to turn 90 degrees, we could write a script that waited until the angle in relation to magnetic north changed by 90 degrees. We could even do this with one function. It might look something like this: This is a lot to take in for a new programmer so lets briefly go over this function. When it is called we put in a value for direction. The possible correct values are left and right. If the direction is right the left wheel moves until the angle of the robot is equal to the desired angle. If right is passed to the function the opposite happens. Just in case the human mispells the word or puts something else in a third print statement is used to tell them that their input is not valid. We will get to this process later in the course. Assignment 5.6 Read the chapter from our text titled, Chapter 5 - Conditionals. While you read the chapter open the Python environment through the Linux terminal on your Raspberry Pi as before. Follow along with the examples from the text as you go. This will help you learn Python more quickly. When you are done reading the chapter complete exercises 1, 2 and 3 at the end of the chapter on your own to make sure you understand what you read. If not, see the Note above. 5.7 Iteration There are many reasons to use iteration in programming. The most straightforward reason is to do a spedified action a certain number of times. Imagine you are designing a robotic NASCAR driver. This would be the perfect place for iteration. In a NASCAR race the driver makes the same left turns hundreds of times. Considering one of the advantages of robots is that they can perform tasks that humans find boring or too repetitive, our robot NASCAR driver would thrive in this environment making the same left turns over and over for hours. We will approach iteration by learning two programming concepts: for loops and while statements. Each is useful in various situations. Sometimes they are interchangable depending on the problem being solved. One uses Boolean logic and the other does not. Lets start with the for loop. 5.7.1 for Loops Unitl now, everything we have done, we have done once. Most of the time though, our robots will need to do things repeatedly until a desired outcome is reached. An example could be that our robots collect data from a website over the course of several hours. One of my home automation projects was to build a solar powered garden watering system for my wifes garden. This is very much a robotics application as we wanted to make sure water is delivered consistently every day even when we were gone on vacation. One of the challenges though was that sometimes it rains in the summer, ususally at night. If it rains enough the night before there is no need to water the next morning. As humans we would just think, How much did it rain yesterday (if it did at all)? and make our decision to water that morning. A robot needs clear rules though to follow. In this case, after a lot of trial and error, I decided that it was best to check the weather conditions between 4:00 pm and the time the watering system came on in the morning. That way, if enough rain had fallen there was no need to water the garden. I decided to check the weather forcast using openweathermap.org. Every 15 minutes between 4:00 pm and 8:00 am the Raspberry Pi would scrape the current weather data off the website, parse out the current weather condition and record it in a csv file. To do this I used something that looked like this: Dont worry too much about the details of this function called collect_weather(). Instead focus on the line that begins with the word for. This is one way to use a for loop to iterate a process (checking the weather). I know that I want to check the weather over the course of 15 hours every 15 minutes (four times an hour). This loop will start at 4:00 pm and run 60 times. During the loop, the Pi checks the weather and records the data in a file then sleeps for 15 minutes (900 seconds). This is a very complicated script so lets try something simpler using our Raspberry Pi and the Python environment. Open a ternminal and start the Python environment as before. Type the following lines: This for loop will count to five, updating the value of x each time and print x. Try it out by hitting enter to get this result: Notice that, while the loop ran five times, the value of x was not five at the end. You can see why. In computer science we generally start counting at zero instead of one. As a result the range() function used in a for loop ends its final iteration at one less than the value passed to the function, in this case four instead of five. Remember this for future scripts. There are other ways to use for like iterating over lists. We will get to those later in our course. For now, explore this method by completing the next assignment. Assignment 5.7.1 Read sections 1-3 of chapter 4 from our text. While you read the chapter open the Python environment through the Linux terminal on your Raspberry Pi as before. Follow along with the examples from the text as you go. This will help you learn Python more quickly. When you are done reading the chapter complete exercises in section 4.3 on your own to make sure you understand what you read. If not, see the Note above. 5.7.2 while Loops Our last introductory programming concept is a different kind of loop. Sometimes, the programmer does not know how many iterations will be necessary to solve the problem. For example, from the previous description of a Raspberry Pi based watering system for a garden, I did not know when I would stop using the system. At the end of the season after the first freeze we would have no more need to water. At that point, we would just shut it down and take the electronics in for the winter. Until then, I needed it to keep going. As a result, I used one of the simplest loops which is written like this: while True: while loops run as long as the condition being tested is true. In this case, I am saying do everything in the loop as long as true is true. This will be true forever (or until I unplug the Raspberry Pi for the season). There are many other ways to use while loops but the basic concept is the same - keep doing these things until the condition is no longer true. For example, lets say you are building that robotic NASCAR system mentioned earlier. If you wanted to keep the car going until the end of the race you could say something like this: This extremely oversimplified script basically says, we start the race at zero laps. if we do something that means we have completed a lap, add one to the total laps. So, after the finish line is crossed the first time, laps gets increased by one. while laps is less than or equal to 500 (the end) keep driving. To understand this more, complete the next assignment. Assignment 5.7.2 Read the chapter from our text titled, Chapter 7 - Iteration. While you read the chapter open the Python environment through the Linux terminal on your Raspberry Pi as before. Follow along with the examples from the text as you go. This will help you learn Python more quickly. When you are done reading the chapter complete exercises 1 and 2 at the end of the chapter on your own to make sure you understand what you read. If not, see the Note above. "],["robotic-systems.html", "Section 6 Robotic Systems", " Section 6 Robotic Systems A fundamental qustion in mechatronics is, what is a robot? Over the course of this year, you should be able to come up with some answers for this question. This short section is aimed at helping us understand that before moving on to our final project. Now that you have learned basics of electronics, mechanics and programming, you may begin to explore the larger field of robotics applications. For this assignment we will begin with background from some experts to supplement what you have already learned. To begin, lets take a look at some of the most recent robotics development using a very thorough BBC documentary: Make a list of your own criteria that make something a robot. This list may include anything you like. Give a justification for each criteria. Read this page from the IEEE which attempts to help us decide what a robot is and is not. How does this change your list? Be sure to listen to the speakers on the page. Assignment 6.0 Choose one of the robot types from this page. Conduct your own reaserch and create a 5-10 minute presentation demonstrating the characteristics and applications of your chosen robot type. Provide video descriptions of these real-world robots as well as the educational pathways needed to work with these robot types. "],["capstone-project.html", "Section 7 Capstone Project", " Section 7 Capstone Project The stone placed at the very top of an archway which holds the rest of the arch in place is known as the capstone. Just like mason placing that last stone, you are ready to demonstrate your learning. For the last four months of this course you will complete a capstone project. You, and a partner if you choose, will complete a complex robotics project using everything you have learned this year. Overview: Each group/person must design, build, test, and demonstrate a device controlled by one or more microcontrollers (e.g. Arduino, Raspberry Pi, ESP 8266, etc.). The device should have functioning elements in all five categories listed below. The device will be rated (graded) based on the level of functionality achieved in each category. There will also be grading adjustments for qualitative attributes. You are allowed to use circuits and code you find on the Internet or in other books, but make sure you have a full understanding of what the code or circuit does. You should also add value to what you use by incorporating it into your system creatively and effectively. Also, make sure you cite in your report, your poster and in your final code sketches any sources of any code or circuits you use. The materials used for this project must meet the following requirements: Any materials from the Arduino Super Starter kit for class may be used including sensors, motors, wires, lights, displays and resistive devices Any approved components available in the lab (i.e. sensors on loan, stepper motors, structural parts, etc.) Up to 200g of ABS filament (for entire project, including prototypes). Up to $75 in pre-approved student purchased parts (per project, not per student). It is up to the student to order these components although I will help you find them, if needed. Be careful here, qualitative deductions will be made for expensive and/or unnecessary component selection (i.e. using a Raspberry Pi where an Arduino UNO will work, etc.) NOTE - the choice of your project concept could have a large impact on the grade you receive; so please evaluate your alternative concepts carefully, based on the grading criteria below. Each of you will receive a detailed set of instructions for this project. "],["going-further-with-robotics.html", "Section 8 Going Further with Robotics 8.1 Robotics in Higher Education 8.2 Supplemental Videos", " Section 8 Going Further with Robotics 8.1 Robotics in Higher Education You are taking this course because you are interested in learning about robots, obviously. You may want to pursue this subject after you leave high school as well. What does it mean to be a robotic engineer or roboticist? This is more than having an enthusiasm for the field. It means pursuing an educational path that prepares you for a profession in robotics. It also looks different depending on what you want to do with robotics. Robotics engineering is a standalone field within mechatronics. However, many fields benefit from this area of study even if it not the primare goal. One of our recent alumns, Katie Schutt, summs up her path through robotics at Windsor High School and how it helped her get to Aeronautical Engineering: WHS robotics was the high school program that probably best prepared me for life and education in college, especially as an incoming engineering student. I learned technical skills around designing and testing under the pressure of requirements and a deadline, and the necessary programming logic and proficiency. Equally important, I developed skills in public speaking, documenting the proposals and then progress of my projects, and the ability to constructively work with a team. All of these skills were heavily emphasized and required to succeed in my first semester at CU, and robotics provided the foundation for those skills to be built upon. Katie is working to become an astronaut with the goal of traveling to other planets in our solar system. The technical skills she is building will give her opportunities like this. It began in her robotics classroom at WHS. You may not know where you want to take robotics yet. There are hundred of branches of robotics. All of them have some common threads. In high school some of these skills may be learned to prepare students for university level robotics: Math Algebra Geometry Trigonometry Calculus Physics Dynamics Kinematics Computer Science Programming languages Computation logic Cloud Computing Engineering Language Arts To get on this path be sure to talk to your counselor about your goals. Feel free to ask me about this as well. We have many former students who have pursued this field and are attending colleges all over the United States. An excellent way to learn more is to attend an engineering day at Colorado State University or the University of Colorado in Boulder. Most high school students find that a visit to campus makes the potential college experience more attainable and realistic. 8.2 Supplemental Videos A.I Agenda 2020 | Rise of the Machines - Super Intelligence Quantum Computers Documentary Why is the metric system important? The Genius of George Boole Shakey:Experiments in Robotic Planning and Learning (1972) BBC Documentary - Hyper Evolution : Rise Of The Robots (Part 1) BBC Documentary - Hyper Evolution : Rise Of The Robots (Part 2) BBC Documentary - Hyper Evolution : Rise Of The Robots (Part 3) Robots that fly  and cooperate | Vijay Kumar "],["course-materials-and-instructions.html", "Section 9 Course Materials and Instructions 9.1 Course Lecture Notes 9.2 Using GitHub 9.3 Think Python Textbook 9.4 All About Circuits Textbook 9.5 OnShape Account Setup 9.6 Controlling the Raspberry Pi Remotely Over Wifi", " Section 9 Course Materials and Instructions 9.1 Course Lecture Notes 9.1.1 Introduction 9.2 Using GitHub For this couse we will store all Python and Bash scripts on GitHub. This will alllow us to utilize the version control system Git and work from an online repository instead of storing all code on a single device. In doing so, you will be able to collaborate with others more easily and use multible devices on the same project such as a PC at school, a Mac at home and a Raspberry Pi that travels with you. 9.3 Think Python Textbook Our course programming text is called Think Python by Allen B. Downey. It will most likely be easiest to use the HTML version but there is also a PDF download at the site as well. 9.4 All About Circuits Textbook Our course electronics text is Volume I of All About Circuits. This online text will focus on Direct Current (DC) electricity. 9.5 OnShape Account Setup OnShape offers a powerful online CAD solution. Students in secondary education can receive a free student account which includes all of the features of the paid account and the learning center. This makes it an outstanding CAD alternative. Go to the OnShape website to sign up for a free account. Think about the email address you want to use. If you use your school email address it may be more convenient for now but you will lose access to that email as soon as you leave WHS and that could make it more difficult to access any projects on the OnShape account that you might like to maintain. 9.6 Controlling the Raspberry Pi Remotely Over Wifi Using a remote shell, one can control a Raspberry Pi with another computer. We have been doing this through the wired USB connection which has its own IP address over USB. The difference between the wired connection and using wifi is that there is no wire necessary. Both the Pi and the computer are connected to the same wifi but not directly to each other. Control may use the linux command line or with a GUI using a service like Tight VNC. Learning how to do this will allow our robots to become less tethered to a specific location. This concept, more broadly is known as the Internet of Things (IoT). Devices with internet connections can interact with one another over that connection. Many of you probably already have some IoT devices in your homes like thermostats that interact with each other to maintain the most energy-efficient comfort in your house or security cameras that may be accessed on a mobile device from anywhere. In short, our robots will not be fully robots until we learn to do this. As a result, the Capstone project for this course in semester two requires this. In all cases one thing is assumed. The Raspberry Pi and the device using the Secure Shell are connected to the same router. In our lab, we will use the MechLab wifi network. At home, students will need to make sure to connect the pi to their home router which the computer is using. TAKE NOTE! The Raspberry Pi cannot connect to all types of wifi networks. In places like schools and offices it is common for WPA2 enterprise networks to be in use. At WHS, the waccess and wchrome networks are both this type. These networks have an extra layer of security to them. What this means for you, is your device needs a digital certificate identifying it as your device and you as a registered user. This cannot be done with a Raspberry Pi. As a result we cannot use those networks. Instead, we will use the mechlab network while in school in most cases. You may also use the wsdguest netword to connect at school but SSH is more challenging with that network. 9.6.1 Setting up SSH for Chrome OS Using SSH with a wireless connection will work on your Chromebook with only one slight modification to the IP address you use with your SSH application. To accomplish this, rather than use the IP address to the tethered device, you will find IP address of the Raspberry Pi after it is connected to a local network. Follow these steps to complete this process: Get the network ID and passphrase for the network you would like to use. In the lab, I will provide you with the passphrase for the mechlab network. If you are trying to do this at home or somewhere else you can follow these expanded instructions in order to identify your network and set up your connection. From the terminal, open the wpa-supplicant configuration file in nano: sudo nano /etc/wpa_supplicant/wpa_supplicant.conf This opens a file that looks like this in the nano editor: Fig. 9.? - The wpa_supplicant.conf is a configuration file for wpa_supplicant, a piece of software used to implement WPA and other security protocols that WiFi networks implement. It is used to create a headless configuration on the Raspberry Pi. Add these lines of code to the bottom of the file: Fig. 9.? - Replace the password with the phrase given to you in the Mechatronics lab. Type ctrl + x, answer y and save the file. If you restart the Raspberry pi, it should connect to the wifi network. to make sure, lets check the connection. Sign back into the Pi using the SSH client application and the previous IP address. Use ifconfig command to determine the IP address of the Pi. Look at the section title wlan0. The inet address is what we want. See below: Fig. 9.? - The IP address of the Pi may be found in the wlan0 section of the output from ifconfig. Finally, connect to the Pi using this IP address in the SSH client application instead of the USB IP address we have been using in class. As long as the Pi is on the same wifi network as your Chromebook, you will not use the USB connection to the Chromebook. You may use a separate power supply and it will still connect. If neede, this process may also be done with a PC, Mac or Linus computer. It is most likely that you will be doing this with a PC so those directions are detailed below. 9.6.2 Setting up SSH for Windows Complete the following steps to create a secure shell connection with a computer running Windows: Be sure the Raspberry Pi is turned on and connected to router. Be sure the computer is connected to the same network. Repeat the process detailed in step 6 in the section above to find the IP address of the Pi. Make a note of this address, this is the address of the Pi on the network. The computer will also have an ip address on the network. To see that address open Windows PowerShell and type ipconfig. The IPv4 Address is the address of the computer. If both are on the same network, the first three numbers should be the same. If not, they are not connected to the same network and a SSH connection cannot be made. Download and install Putty (Most will choose the 64 bit Windows Installer file). Open Putty. In the Host Name (IP address) box, type in the address of the Raspberry Pi. Click Yes at the warning. Enter the username and password for the device. You are now connected to the Pi via SSH to the command line. If you would like to set up a graphical user interface (GUI) for use with SSH you can try using TightVNC. This HowToGeek Guide shows you how to do it. 9.6.3 Setting up SSH for Mac or Linux In case you need to use Mac or Linux for your host computer, the process is very similar for each. Follow this guide to set it up. 9.6.4 What to do if Your Raspberry Pi Needs a New OS There may be a situation where you need to replace the operating system (OS) on your Raspberry Pi. This could happen for any number of reasons. You lost the SD card The SD card is damaged You have made some changes to the OS which need to be reversed back to the original state Note - If you follow the steps here, your Pi will be just like the day you received it. All work will be lost. Luckily, if you have everything on GitHub, your code should still be there. To replace your image follow the steps found here. Jump down to the section titled, How to Restore Your Raspberry Pi Project. The image for the Pi may be found in this directory. Download it and use it as your image file. You will need an SD card adapter and access to a computer with imaging software like Win32 Disk Imager. 9.6.5 References "]]
